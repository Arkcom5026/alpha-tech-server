// purchaseOrderReceiptRoutes.js

const express = require('express');
const router = express.Router();

const {
  createPurchaseOrderReceipt,
  getAllPurchaseOrderReceipts,
  getPurchaseOrderReceiptById,
  updatePurchaseOrderReceipt,
  deletePurchaseOrderReceipt,
  getReceiptBarcodeSummaries,
  finalizeReceiptController,
  markPurchaseOrderReceiptAsPrinted,
  getReceiptsReadyToPay,
  // NEW endpoints (QUICK + barcode + commit)
  createQuickReceipt,
  generateReceiptBarcodes,
  printReceipt,
  commitReceipt,
} = require('../controllers/purchaseOrderReceiptController');


const { verifyToken } = require('../middlewares/verifyToken');
router.use(verifyToken);

// üì• POST - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (PO)
router.post('/', createPurchaseOrderReceipt);


// üìÑ GET - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤)
router.get('/', getAllPurchaseOrderReceipts);

// üí∞ GET - ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÉ‡∏ö‡∏£‡∏±‡∏ö)
router.get('/ready-to-pay', getReceiptsReadyToPay);

// üì¶ GET - ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SN (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)
router.get('/with-barcode-status', getReceiptBarcodeSummaries);
// aliases for backward compatibility
router.get('/summaries', getReceiptBarcodeSummaries);
router.get('/receipt-barcode-summaries', getReceiptBarcodeSummaries);

// QUICK create (static; keep before '/:id' routes to avoid conflict)
router.post('/quick-receipts', createQuickReceipt);

// üîç GET - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.get('/:id', getPurchaseOrderReceiptById);

// ‚úèÔ∏è PUT - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.put('/:id', updatePurchaseOrderReceipt);

// üóëÔ∏è DELETE - ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.delete('/:id', deletePurchaseOrderReceipt);

// ‚úÖ FINALIZE (idempotent): ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á POST ‡πÅ‡∏•‡∏∞ PATCH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
router.post('/:id/finalize', finalizeReceiptController);
router.patch('/:id/finalize', finalizeReceiptController);

// üñ®Ô∏è Mark printed
router.patch('/:id/printed', markPurchaseOrderReceiptAsPrinted);

// ---------- NEW: QUICK + Barcode + Commit ----------
// Generate barcodes (LOT for SIMPLE, SN for STRUCTURED)
router.post('/:id/generate-barcodes', generateReceiptBarcodes);

// Mark printed and return printable payload
router.post('/:id/print', printReceipt);

// Commit stock effects (auto-generate if missing)
router.post('/:id/commit', commitReceipt);

module.exports = router;





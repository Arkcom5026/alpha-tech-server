// controllers/categoryController.js ‚Äî Option A: full FE/BE contract
// - ‡∏£‡∏±‡∏ö q ‡∏´‡∏£‡∏∑‡∏≠ search
// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö includeInactive, page, limit
// - ‡∏Ñ‡∏∑‡∏ô { items, total, page, limit }
// - ‡∏Å‡∏±‡∏ô cache 304 ‡∏î‡πâ‡∏ß‡∏¢ Cache-Control: no-store
// - ‡∏Ñ‡∏á logic archive/restore + isSystem guards ‡πÄ‡∏î‡∏¥‡∏°

const { prisma, Prisma } = require('../lib/prisma');

const toInt = (v) => (v === undefined || v === null || v === '' ? undefined : Number(v));

// GET /categories
const getAllCategories = async (req, res) => {
  try {
    const q = ((req.query?.q ?? req.query?.search) || '').toString().trim();
    const page = Number(req.query?.page) > 0 ? Number(req.query.page) : 1;
    const limit = Number(req.query?.limit) > 0 ? Number(req.query.limit) : 20;
    const includeInactive = String(req.query?.includeInactive).toLowerCase() === 'true';

    const where = {
      ...(q ? { name: { contains: q, mode: 'insensitive' } } : {}),
      ...(includeInactive ? {} : { active: true }),
    };

    const [total, items] = await Promise.all([
      prisma.category.count({ where }),
      prisma.category.findMany({
        where,
        orderBy: { name: 'asc' },
        skip: (page - 1) * limit,
        take: limit,
      }),
    ]);

    res.set('Cache-Control', 'no-store');
    res.json({ items, total, page, limit });
  } catch (error) {
    console.error('‚ùå [getAllCategories] error:', error);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// GET /categories/:id
const getCategoryById = async (req, res) => {
  try {
    const id = toInt(req.params?.id);
    if (!id) return res.status(400).json({ message: 'id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const category = await prisma.category.findUnique({ where: { id } });
    if (!category) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });

    res.json(category);
  } catch (error) {
    console.error('‚ùå [getCategoryById] error:', error);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// POST /categories
const createCategory = async (req, res) => {
  try {
    const name = (req.body?.name || '').toString().trim();
    if (!name) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });
    }

    const isSystem = Boolean(req.body?.isSystem) === true;

    const created = await prisma.category.create({ data: { name, active: true, isSystem } });
    res.status(201).json(created);
  } catch (error) {
    console.error('‚ùå [createCategory] error:', error);
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {
      return res.status(409).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ã‡πâ‡∏≥ (unique constraint)' });
    }
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// PATCH /categories/:id
const updateCategory = async (req, res) => {
  try {
    const id = toInt(req.params?.id);
    if (!id) return res.status(400).json({ message: 'id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const name = (req.body?.name || '').toString().trim();
    if (!name) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });

    const current = await prisma.category.findUnique({ where: { id }, select: { id: true, isSystem: true } });
    if (!current) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    if (current.isSystem) return res.status(403).json({ message: '‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏∞‡∏ö‡∏ö (isSystem) ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });

    const updated = await prisma.category.update({
      where: { id },
      data: { name },
    });

    res.json(updated);
  } catch (error) {
    console.error('‚ùå [updateCategory] error:', error);
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    }
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {
      return res.status(409).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ã‡πâ‡∏≥ (unique constraint)' });
    }
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// üîê PATCH /categories/:id/archive ‚Äî soft delete (active=false)
const archiveCategory = async (req, res) => {
  try {
    const id = toInt(req.params?.id);
    if (!id) return res.status(400).json({ message: 'id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const current = await prisma.category.findUnique({ where: { id }, select: { id: true, active: true, isSystem: true } });
    if (!current) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    if (current.isSystem) return res.status(403).json({ message: '‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏∞‡∏ö‡∏ö (isSystem) ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });

    const usedByType = await prisma.productType.findFirst({ where: { categoryId: id }, select: { id: true, name: true } });
    if (usedByType) {
      return res.status(409).json({
        error: 'HAS_REFERENCES',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (ProductType) ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà',
        conflict: usedByType,
      });
    }

    if (current.active === false) return res.json({ message: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', id });

    await prisma.category.update({ where: { id }, data: { active: false } });
    return res.json({ message: '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', id });
  } catch (error) {
    console.error('‚ùå [archiveCategory] error:', error);
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    }
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// üîê PATCH /categories/:id/restore ‚Äî active=true
const restoreCategory = async (req, res) => {
  try {
    const id = toInt(req.params?.id);
    if (!id) return res.status(400).json({ message: 'id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const current = await prisma.category.findUnique({ where: { id }, select: { id: true, active: true } });
    if (!current) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô' });

    if (current.active === true) return res.json({ message: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß', id });

    await prisma.category.update({ where: { id }, data: { active: true } });
    return res.json({ message: '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', id });
  } catch (error) {
    console.error('‚ùå [restoreCategory] error:', error);
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô' });
    }
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

// GET /categories/dropdowns ‚Äî return only active=true
const getCategoryDropdowns = async (req, res) => {
  try {
    const dropdowns = await prisma.category.findMany({
      where: { active: true },
      select: { id: true, name: true, active: true, isSystem: true },
      orderBy: { name: 'asc' },
    });
    res.set('Cache-Control', 'no-store');
    res.json(dropdowns);
  } catch (error) {
    console.error('‚ùå [getCategoryDropdowns] error:', error);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á dropdown ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ' });
  }
};

module.exports = {
  getAllCategories,
  getCategoryById,
  createCategory,
  updateCategory,
  archiveCategory,
  restoreCategory,
  getCategoryDropdowns,
};

// üì¶ branchPriceController.js

const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

// ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô)
const getActiveBranchPrice = async (req, res) => {
    const { productId } = req.params;
    const branchId = req.user.branchId;
    const now = new Date();

    console.log('getActiveBranchPrice  productId : ', productId);

    try {
        const price = await prisma.branchPrice.findFirst({
            where: {
                branchId,
                productId: parseInt(productId),
                isActive: true,
                OR: [
                    { effectiveDate: null },
                    { effectiveDate: { lte: now } },
                ],
                AND: [
                    { expiredDate: null },
                    { expiredDate: { gte: now } },
                ],
            },
            orderBy: { effectiveDate: "desc" },
        });

        if (!price) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" });
        }

        res.json(price);
    } catch (err) {
        console.error("‚ùå getActiveBranchPrice error:", err);
        res.status(500).json({ error: "Server error" });
    }
};

// ‚úÖ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô)
const upsertBranchPrice = async (req, res) => {
    const { productId, price, effectiveDate, expiredDate, note, isActive } = req.body;
    const branchId = req.user.branchId;
    const updatedBy = req.user.id;

    try {
        const result = await prisma.branchPrice.upsert({
            where: {
                productId_branchId: {
                    productId: parseInt(productId),
                    branchId,
                },
            },
            update: {
                price,
                effectiveDate,
                expiredDate,
                note,
                updatedBy,
                isActive,
            },
            create: {
                productId,
                branchId,
                price,
                effectiveDate,
                expiredDate,
                note,
                updatedBy,
                isActive,
            },
        });

        res.json(result);
    } catch (err) {
        console.error("‚ùå upsertBranchPrice error:", err);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ" });
    }
};

// ‚úÖ 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ list ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤)
const getBranchPricesByBranch = async (req, res) => {
    const branchId = req.user.branchId;

    try {
        const prices = await prisma.branchPrice.findMany({
            where: { branchId },
            include: {
                product: { select: { id: true, name: true } },
            },
            orderBy: { updatedAt: "desc" },
        });

        res.json(prices);
    } catch (err) {
        console.error("‚ùå getBranchPricesByBranch error:", err);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ" });
    }
};

// ‚úÖ 4. ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å StockItem (‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥)
const getAllProductsWithBranchPrice = async (req, res) => {
    const branchId = req.user.branchId;

    try {
        const products = await prisma.product.findMany({
            orderBy: { name: "asc" },
        });

        const prices = await prisma.branchPrice.findMany({
            where: { branchId },
        });

        // ‚úÖ ‡∏î‡∏∂‡∏á StockItem ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠ productId
        const latestStockItems = await prisma.stockItem.findMany({
            where: { branchId },
            orderBy: { receivedAt: 'desc' },
            distinct: ['productId'],
            select: {
                productId: true,
                costPrice: true,
                salePrice1: true,
                salePrice2: true,
                salePrice3: true,
                receivedAt: true,
            },
        });

        const latestStockMap = latestStockItems.reduce((acc, item) => {
            acc[item.productId] = item;
            return acc;
        }, {});

        const result = products.map((product) => {
            const matchedPrice = prices.find((p) => p.productId === product.id);
            const latestStock = latestStockMap[product.id];

            return {
                product: {
                    id: product.id,
                    name: product.name,
                },
                branchPrice: matchedPrice || null,
                rawPrices: latestStock ? [latestStock] : [],
                latestCostPrice: latestStock?.costPrice || null,
                avgCostPrice: latestStock?.costPrice || null, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            };
        });

        console.log(
            'getAllProductsWithBranchPrice : ',
            result.map((r) => ({
                product: r.product.name,
                latestCostPrice: r.latestCostPrice,
                avgCostPrice: r.avgCostPrice,
            }))
        );

        res.json(result);
    } catch (err) {
        console.error("‚ùå getAllProductsWithBranchPrice error:", err);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
    }
};



module.exports = {
    getActiveBranchPrice,
    upsertBranchPrice,
    getBranchPricesByBranch,
    getAllProductsWithBranchPrice,
};

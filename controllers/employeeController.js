// ‚úÖ @filename: server/controllers/employeeController.js
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const getAllEmployees = async (req, res) => {
  try {
    const branchId = req.user?.branchId;

    if (!branchId) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ branchId ‡∏à‡∏≤‡∏Å token' });
    }

    const employees = await prisma.employeeProfile.findMany({
      where: {
        branchId: parseInt(branchId),
      },
      include: {
        user: true,
        position: true,
        branch: true,
      },
    });

    res.json(employees);
  } catch (error) {
    console.error('‚ùå getAllEmployees error:', error);
    res.status(500).json({ error: 'Server error while fetching employees' });
  }
};

const getEmployeesById = async (req, res) => {
  try {
    const employee = await prisma.employeeProfile.findUnique({
      where: { id: parseInt(req.params.id) },
      include: { user: true, position: true, branch: true },
    });
    res.json(employee);
  } catch (err) {
    res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
  }
};

const createEmployees = async (req, res) => {
  try {
    const { userId, name, phone, branchId, positionId } = req.body;

    if (!userId || !name || !branchId || !positionId) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    console.log('üì¶ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:', { userId, name, phone, branchId, positionId });

    if (isNaN(parsedUserId) || isNaN(parsedBranchId) || isNaN(parsedPositionId)) {
      return res.status(400).json({ message: '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    await prisma.user.update({
      where: { id: parsedUserId },
      data: { role: 'employee' },
    });

    const newEmployee = await prisma.employeeProfile.create({
      data: {
        userId: Number(userId),
        name,
        phone,
        branchId: Number(branchId),
        positionId: Number(positionId),
      },
    });

    res.status(201).json(newEmployee);
  } catch (err) {
    console.error('‚ùå createEmployees error:', err);
    res.status(400).json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: err.message });
  }
};

const updateEmployees = async (req, res) => {
  try {
    const { name, phone, positionId } = req.body;
    const updated = await prisma.employeeProfile.update({
      where: { id: parseInt(req.params.id) },
      data: { name, phone, positionId: parseInt(positionId) },
    });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', error: err.message });
  }
};

const deleteEmployees = async (req, res) => {
  try {
    await prisma.employeeProfile.delete({
      where: { id: parseInt(req.params.id) },
    });
    res.status(204).end();
  } catch (err) {
    res.status(400).json({ message: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: err.message });
  }
};

const getUsersByRole = async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      where: { role: 'user' },
      select: { id: true, email: true, name: true },
    });
    res.json(users);
  } catch (err) {
    console.error('‚ùå getUsersByRole error:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' });
  }
};

const approveEmployee = async (req, res) => {
  const { userId, positionId, role, branchId, name, phone } = req.body;
  const requestedBranchId = branchId;
  console.log('üì¶ approveEmployee received data:',req.body )
  

  try {
    const MAIN_BRANCH_ID = parseInt(process.env.MAIN_BRANCH_ID, 10);
    const isMainBranchAdmin =
      req.user.role === 'employee' && req.user.branchId === MAIN_BRANCH_ID;

    const branchIdToUse = isMainBranchAdmin
      ? requestedBranchId
      : req.user.branchId;

    await prisma.employeeProfile.create({
      data: {
        userId: parseInt(userId, 10),
        branchId: parseInt(branchIdToUse, 10),
        positionId: parseInt(positionId, 10),
        name,
        phone,
      },
    });

    await prisma.user.update({
      where: { id: parseInt(userId, 10) },
      data: { role },
    });

    res.json({ message: '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (error) {
    console.error('‚ùå approveEmployee error:', error);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' });
  }
};

const getAllPositions = async (req, res) => {
  try {
    const positions = await prisma.position.findMany({
      orderBy: { name: 'asc' },
    });
    res.json(positions);
  } catch (err) {
    console.error('‚ùå getAllPositions error:', err);
    res.status(500).json({ message: '‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' });
  }
};

module.exports = {
  getAllEmployees,
  getEmployeesById,
  createEmployees,
  updateEmployees,
  deleteEmployees,
  getUsersByRole,
  approveEmployee,
  getAllPositions,
};

// customerController.js

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const bcrypt = require('bcryptjs');

// üîß helper: ‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ undefined
const omitUndefined = (obj) => Object.fromEntries(Object.entries(obj).filter(([, v]) => v !== undefined));

const getCustomerByPhone = async (req, res) => {
  try {
    const { phone } = req.params;
    const { branchId } = req.user; // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô branchId ‡∏à‡∏≤‡∏Å token

    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const customer = await prisma.customerProfile.findFirst({
      where: {
        phone: phone,
        sale: {
          some: {
            branchId: Number(branchId),
          },
        },
      },
      include: { user: true },
    });

    if (!customer) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    return res.json({
      id: customer.id,
      name: customer.name,
      phone: customer.phone,
      address: customer.address,
      email: customer.user?.email || '',
      type: customer.type,
      companyName: customer.companyName,
      taxId: customer.taxId,
      creditLimit: customer.creditLimit,
      creditBalance: customer.creditBalance,
    });
  } catch (err) {
    console.error('[getCustomerByPhone] ‚ùå', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' });
  }
};

const getCustomerByName = async (req, res) => {
  try {
    const { q } = req.query;
    const { branchId } = req.user; // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô branchId ‡∏à‡∏≤‡∏Å token

    if (!q) {
      return res.json([]);
    }

    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const customers = await prisma.customerProfile.findMany({
      where: {
        name: {
          contains: q,
          mode: 'insensitive',
        },
        sale: {
          some: {
            branchId: Number(branchId),
          },
        },
      },
      take: 10,
      include: { user: true },
    });

    console.log('getCustomerByName : ', customers);

    return res.json(
      customers.map((c) => ({
        id: c.id,
        name: c.name,
        phone: c.phone,
        address: c.address,
        email: c.user?.email || '',
        type: c.type,
        companyName: c.companyName,
        taxId: c.taxId,
        creditLimit: c.creditLimit,
        creditBalance: c.creditBalance,
      }))
    );
  } catch (err) {
    console.error('[getCustomerByName] ‚ùå', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠' });
  }
};

const getCustomerByUserId = async (req, res) => {
  try {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const userId = req.user.id;
    const { role } = req.user;

    if (role !== 'customer') {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' });
    }

    const customer = await prisma.customerProfile.findUnique({
      where: { userId },
      include: { user: true },
    });

    if (!customer) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    return res.json({
      id: customer.id,
      name: customer.name,
      phone: customer.phone,
      address: customer.address,
      district: customer.district,
      province: customer.province,
      postalCode: customer.postalCode,
      email: customer.user?.email || '',
    });
  } catch (err) {
    console.error('[getCustomerByUserId] ‚ùå', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' });
  }
};

const createCustomer = async (req, res) => {
  try {
    const { branchId } = req.user; // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô branchId ‡∏à‡∏≤‡∏Å token
    const { name, phone, email, address, type, companyName, taxId } = req.body;

    if (!phone || !name) {
      return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£' });
    }

    const existing = await prisma.customerProfile.findFirst({ where: { phone } });
    if (existing) {
      return res.status(409).json({ error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Global ‡∏ï‡∏≤‡∏° Schema
    // ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ ID: ${branchId}
    // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ
    const rawPassword = phone.slice(-4);
    const hashedPassword = await bcrypt.hash(rawPassword, 10);

    const newUser = await prisma.user.create({
      data: {
        email: email || null,
        loginId: phone,
        password: hashedPassword,
        role: 'customer',
        loginType: 'PHONE',
      },
    });

    const newCustomer = await prisma.customerProfile.create({
      data: {
        name,
        phone,
        address: address || null,
        userId: newUser.id,
        type: type || 'INDIVIDUAL',
        companyName: companyName || null,
        taxId: taxId || null,
      },
    });

    return res.status(201).json(newCustomer);
  } catch (err) {
    console.error('[createCustomer] ‚ùå', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' });
  }
};



// POS-side: staff updates any customer's profile (RBAC + branch scope)
const updateCustomerProfile = async (req, res) => {
  try {
    const actor = req.user;
    if (!actor) {
      console.warn('[me-pos] UNAUTHENTICATED request ‚Äî missing req.user');
      return res.status(401).json({ message: 'UNAUTHENTICATED: missing user context' });
    }
    console.log('[me-pos] actor =', { id: actor.id, role: actor.role, branchId: actor.branchId });
    // üîê Accept both "staff" and "employee" (normalize to lowercase)
    const role = String(actor.role || '').toLowerCase();
    const STAFF_ROLES = new Set(['admin', 'manager', 'staff', 'employee']);
    if (!STAFF_ROLES.has(role)) {
      return res.status(403).json({ message: 'FORBIDDEN_ROLE: staff/employee only' });
    }

    const {
      id,
      userId, // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å Online
      email, // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
      phone,
      name,
      address,
      district,
      province,
      postalCode,
      companyName,
      taxId,
    } = req.body ?? {};

    // 1) ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ)
    const orConds = [];
    if (id !== undefined && id !== null && !Number.isNaN(Number(id))) orConds.push({ id: Number(id) });
    if (userId) orConds.push({ userId });
    if (phone) orConds.push({ phone });
    if (email) orConds.push({ user: { email } }); // ‡∏Ñ‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô relation

    if (orConds.length === 0) {
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ id ‡∏´‡∏£‡∏∑‡∏≠ userId ‡∏´‡∏£‡∏∑‡∏≠ email/phone ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡πà‡∏≤' });
    }

    // 2) ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå/‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const target = await prisma.customerProfile.findFirst({
      where: { OR: orConds },
      include: { user: true },
    });

    if (!target) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' });
    }

    // 3) ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    const targetRole = String(target.user?.role || '').toLowerCase();
    if (STAFF_ROLES.has(targetRole)) {
      return res.status(403).json({ message: 'FORBIDDEN_TARGET: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ POS' });
    }
    if (target.userId && Number(target.userId) === Number(actor.id)) {
      return res.status(403).json({ message: 'FORBIDDEN_SELF_SALE: ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á' });
    }

    // 4) ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ BRANCH_SCOPE_ENFORCED (‡∏ñ‡πâ‡∏≤ schema ‡∏°‡∏µ branchId)
    if (Object.prototype.hasOwnProperty.call(target, 'branchId')) {
      if (actor.branchId && target.branchId && actor.branchId !== target.branchId) {
        return res.status(403).json({ message: '‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (BRANCH_SCOPE_ENFORCED)' });
      }
    }

    // 4) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
    const profileData = omitUndefined({
      name,
      phone,
      address,
      district,
      province,
      postalCode,
      companyName,
      taxId,
    });

    // 5) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô transaction ‚Äî ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ email ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
    const updated = await prisma.$transaction(async (tx) => {
      const upd = await tx.customerProfile.update({
        where: { id: target.id },
        data: profileData,
      });

      if (email && target.userId) {
        await tx.user.update({ where: { id: target.userId }, data: { email } });
      }

      return upd;
    });

    const customerAddress = [
      updated.address,
      updated.district,
      updated.province,
      updated.postalCode,
    ]
      .filter(Boolean)
      .join(' ');

    return res.status(200).json({
      ...updated,
      email: email ?? target.user?.email ?? null,
      customerAddress,
    });
  } catch (err) {
    const message = err instanceof Error ? err.message : 'Unknown error';
    if (message.includes('P2025')) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (P2025)' });
    }
    console.error('‚ùå [updateCustomerProfile] error:', message);
    return res.status(500).json({ message: 'Failed to update customer profile' });
  }
};





// Online-side: customer self-updates own profile (upsert + user.email update)
const updateCustomerProfileOnline = async (req, res) => {
  try {
    const user = req.user;
    if (!user || user.role !== 'customer') {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' });
    }

    const { name, email, phone, address, district, province, postalCode, companyName, taxId } = req.body ?? {};

    const profileData = omitUndefined({
      name,
      phone,
      address,
      district,
      province,
      postalCode,
      companyName,
      taxId,
    });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existing = await prisma.customerProfile.findUnique({
      where: { userId: user.id },
      include: { user: true },
    });

    const updated = await prisma.$transaction(async (tx) => {
      let upd;
      if (existing) {
        upd = await tx.customerProfile.update({ where: { id: existing.id }, data: profileData });
      } else {
        upd = await tx.customerProfile.create({ data: { userId: user.id, ...profileData } });
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï email ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á user ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      if (email) {
        await tx.user.update({ where: { id: user.id }, data: { email } });
      }

      return upd;
    });

    const customerAddress = [
      updated.address,
      updated.district,
      updated.province,
      updated.postalCode,
    ].filter(Boolean).join(' ');

    return res.status(200).json({
      ...updated,
      email: email ?? existing?.user?.email ?? user.email ?? null,
      customerAddress,
    });
  } catch (err) {
    const message = err instanceof Error ? err.message : 'Unknown error';
    if (message.includes('P2025')) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (P2025)' });
    }
    console.error('‚ùå [updateCustomerProfileOnline] error:', message);
    return res.status(500).json({ message: 'Failed to update profile' });
  }
};

module.exports = {
  getCustomerByPhone,
  getCustomerByName,
  getCustomerByUserId,
  createCustomer,
  updateCustomerProfile,
  updateCustomerProfileOnline,
};

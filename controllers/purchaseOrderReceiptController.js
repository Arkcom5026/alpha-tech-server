const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const dayjs = require('dayjs');

// üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const generateReceiptCode = async (branchId) => {
  const paddedBranch = String(branchId).padStart(2, '0'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ branchId
  const now = dayjs();
  const prefix = `RC-${paddedBranch}${now.format('YYMM')}`;

  const count = await prisma.purchaseOrderReceipt.count({
    where: {
      branchId,
      createdAt: {
        gte: now.startOf('month').toDate(),
        lt: now.endOf('month').toDate(),
      },
    },
  });

  const running = String(count + 1).padStart(4, '0');
  return `${prefix}-${running}`;
};

// üì• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
exports.createPurchaseOrderReceipt = async (req, res) => {
  try {
    const { purchaseOrderId, note } = req.body;
    const branchId = req.user.branchId;
    const receivedById = req.user.employeeId;

    const code = await generateReceiptCode(branchId); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

    const created = await prisma.purchaseOrderReceipt.create({
      data: {
        purchaseOrderId,
        note,
        branchId,
        receivedById,
        code,
      },
      include: {
        purchaseOrder: {
          select: {
            code: true,
            supplier: { select: { name: true } },
          },
        },
      },
    });

    res.status(201).json(created);
  } catch (error) {
    console.error('‚ùå [createPurchaseOrderReceipt] error:', error);
    res.status(500).json({ error: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  }
};

// üìÑ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤)
exports.getAllPurchaseOrderReceipts = async (req, res) => {
  try {
    const branchId = req.user.branchId;

    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where: { branchId },
      include: {
        purchaseOrder: {
          select: {
            code: true,
            supplier: { select: { name: true } },
          },
        },
      },
    });

    res.json(receipts);
  } catch (error) {
    console.error('‚ùå [getAllPurchaseOrderReceipts] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};

// üîç ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á SN)
exports.getPurchaseOrderReceiptById = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = req.user.branchId;

    if (!id) return res.status(400).json({ error: 'Missing or invalid receipt ID' });

    const receipt = await prisma.purchaseOrderReceipt.findFirst({
      where: { id, branchId },
      include: {
        items: {
          select: {
            id: true,
            quantity: true,
            purchaseOrderItem: {
              select: {
                product: {
                  select: {
                    title: true,
                  },
                },
              },
            },
          },
        },
        purchaseOrder: {
          select: {
            code: true,
            supplier: { select: { name: true } },
          },
        },
      },
    });

    if (!receipt) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    res.set('Cache-Control', 'no-store');
    res.json(receipt);
  } catch (error) {
    console.error('‚ùå [getPurchaseOrderReceiptById] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};

// üì¶ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏û‡∏£‡πâ‡∏≠‡∏° supplier + ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
exports.getPurchaseOrderDetailById = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = req.user.branchId;

    console.log('üì¶ [getPurchaseOrderDetailById] id:>> >> >> >> >>', id, 'branchId:', branchId);

    const purchaseOrder = await prisma.purchaseOrder.findFirst({
      where: { id, branchId },
      include: {
        supplier: true,
        items: {
          include: {
            product: true,
            receiptItems: true,
          },
        },
      },
    });

    if (!purchaseOrder) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ' });

    const itemsWithReceived = purchaseOrder.items.map(item => {
      const receivedQuantity = item.receiptItems?.reduce((sum, r) => sum + r.quantity, 0) || 0;
      return {
        ...item,
        receivedQuantity
      };
    });

    res.json({ ...purchaseOrder, items: itemsWithReceived });
  } catch (error) {
    console.error('‚ùå [getPurchaseOrderDetailById] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ' });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô COMPLETED (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏ö)
exports.markReceiptAsCompleted = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = req.user.branchId;

    const found = await prisma.purchaseOrderReceipt.findFirst({ where: { id, branchId } });
    if (!found) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const updated = await prisma.purchaseOrderReceipt.update({
      where: { id },
      data: { status: 'COMPLETED' },
    });

    res.json(updated);
  } catch (error) {
    console.error('‚ùå [markReceiptAsCompleted] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};

// ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updatePurchaseOrderReceipt = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = req.user.branchId;

    const found = await prisma.purchaseOrderReceipt.findFirst({ where: { id, branchId } });
    if (!found) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const updated = await prisma.purchaseOrderReceipt.update({
      where: { id },
      data: {
        note: req.body.note,
      },
      include: {
        purchaseOrder: {
          select: {
            code: true,
            supplier: { select: { name: true } },
          },
        },
      },
    });

    res.json(updated);
  } catch (error) {
    console.error('‚ùå [updatePurchaseOrderReceipt] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};

// üóëÔ∏è ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.deletePurchaseOrderReceipt = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = req.user.branchId;

    const found = await prisma.purchaseOrderReceipt.findFirst({ where: { id, branchId } });
    if (!found) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    await prisma.purchaseOrderReceipt.delete({ where: { id } });
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå [deletePurchaseOrderReceipt] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};

// üì¶ ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)
exports.getReceiptBarcodeSummaries = async (req, res) => {
  try {
    const branchId = req.user.branchId;

    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where: {
        branchId,
      },
      include: {
        items: {
          include: {
            stockItems: true,
            purchaseOrderItem: {
              select: {
                product: {
                  select: { title: true },
                },
              },
            },
          },
        },
        purchaseOrder: {
          select: {
            code: true,
            supplier: {
              select: { name: true },
            },
          },
        },
      },
    });

    const summaries = receipts.map((receipt) => {
      const total = receipt.items.reduce((sum, item) => sum + item.quantity, 0);
      const generated = receipt.items.reduce((sum, item) => sum + item.stockItems.length, 0);
      return {
        id: receipt.id,
        code: receipt.code,
        receivedAt: receipt.receivedAt,
        supplierName: receipt.purchaseOrder?.supplier?.name || '-',
        orderCode: receipt.purchaseOrder?.code || '-',
        totalItems: total,
        barcodeGenerated: generated,
      };
    });

    res.set('Cache-Control', 'no-store');
    res.json(summaries);
  } catch (error) {
    console.error('‚ùå [getReceiptBarcodeSummaries] error:', error);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ' });
  }
};

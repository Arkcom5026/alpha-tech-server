const { PrismaClient } = require('@prisma/client');
const dayjs = require('dayjs');
const prisma = new PrismaClient();

// üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const generateSaleCode = async (branchId) => {
    const paddedBranch = String(branchId).padStart(2, '0'); // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const now = dayjs();
    const prefix = `SL-${paddedBranch}${now.format('YYMM')}`;

    const count = await prisma.sale.count({
      where: {
        branchId: Number(branchId), // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        createdAt: {
          gte: now.startOf('month').toDate(),
          lt: now.endOf('month').toDate(),
        },
      },
    });
  
    const running = String(count + 1).padStart(4, '0');
   
    return `${prefix}-${running}`;
  };
  


// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô flow ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
// ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ stockItem ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
// ‚úÖ ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ stockItem ‚Üí 'SOLD' ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å payment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ú‡πà‡∏≤‡∏ô markSaleAsPaid()
const createSale = async (req, res) => {
  try {
    const {
      customerId,     
      totalBeforeDiscount,
      totalDiscount,
      vat,
      vatRate,
      totalAmount,
      paymentMethod,
      paymentDetails,
      note,
      items, // [{ stockItemId, barcodeId, price, discount, basePrice, vatAmount, remark }]
    } = req.body;

    const branchId = req.user?.branchId;
    const employeeId = req.user?.employeeId;

    const barcodeIds = items
      .map((i) => i.barcodeId)
      .filter((id) => !!id);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ barcodeId ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢
    const stockItems = await prisma.stockItem.findMany({
      where: {
        id: { in: barcodeIds },
        status: 'IN_STOCK',
      },
    });

    if (stockItems.length !== items.length) {
      return res.status(400).json({ error: '‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢
    const code = await generateSaleCode(branchId);
  
    const sale = await prisma.sale.create({
      data: {
        code, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢
        customerId,
        employeeId,
        branchId,
        totalBeforeDiscount,
        totalDiscount,
        vat,
        vatRate,
        totalAmount,
        paymentMethod,
        paymentDetails,
        note,
        items: {
          create: items.map((item) => ({
            stockItemId: item.stockItemId,
            basePrice: item.basePrice,
            vatAmount: item.vatAmount,
            price: item.price,
            discount: item.discount,
            remark: item.remark,
          })),
        },
      },
      include: { items: true },
    });

    const stockItemIds = sale.items.map((item) => item.stockItemId);

    return res.status(201).json({
      id: sale.id,      // ‚úÖ ‡πÉ‡∏ä‡πâ UUID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Prisma
      code: sale.code,  // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      stockItemIds,     // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stockItemIds ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    });
  } catch (error) {
    console.error("‚ùå [createSale] Error:", error);
    return res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
};






// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const getAllSales = async (req, res) => {
  try {
    const sales = await prisma.sale.findMany({
      orderBy: { soldAt: "desc" },
      include: { items: true },
    });
    return res.json(sales);
  } catch (error) {
    console.error("‚ùå [getAllSales] Error:", error);
    return res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
};







// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏° ID
const getSaleById = async (req, res) => {
  try {
    const { id } = req.params;
    const sale = await prisma.sale.findUnique({
      where: { id: Number(id) },
      include: { items: true },
    });

    if (!sale) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
    return res.json(sale);
  } catch (error) {
    console.error("‚ùå [getSaleById] Error:", error);
    return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
  }
};

const getSalesByBranchId = async (req, res) => {
  try {
    
    const branchId = req.user.branchId;
    

    if (!branchId) {
      return res.status(400).json({ error: "branchId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const sales = await prisma.sale.findMany({
      where: { branchId },
      orderBy: { soldAt: "desc" },
      include: {
        customer: true, // ‡∏ï‡πâ‡∏≠‡∏á include customer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      },
    });

    const mapped = sales.map((sale) => ({
      id: sale.id,
      code: sale.code,
      totalAmount: sale.totalAmount,
      createdAt: sale.createdAt,
      customerName: sale.customer?.name || "-",
      customerPhone: sale.customer?.phone || "-",
    }));

    return res.json(mapped);
  } catch (error) {
    console.error("‚ùå [getSalesByBranchId] Error:", error);
    return res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á" });
  }
};   


const markSaleAsPaid = async (req, res) => {
  const saleId =  parseInt(req.params.id);
  const { branchId } = req.user;

  console.log('markSaleAsPaid saleId : ',saleId)
  console.log('markSaleAsPaid branchId : ',branchId)
  try {
    const sale = await prisma.sale.findUnique({
      where: { id: saleId },
      include: { items: true },
    });

    if (!sale || sale.branchId !== branchId) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }

    await prisma.$transaction([
      prisma.sale.update({
        where: { id: saleId },
        data: {
          paid: true,
          paidAt: new Date(),
        },
      }),
      ...sale.items.map((item) =>
        prisma.stockItem.update({
          where: { id: item.stockItemId },
          data: { status: 'SOLD' },
        })
      ),
    ]);

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå [markSaleAsPaid]', error);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
  }
};


module.exports = {
  createSale,
  getAllSales,
  getSaleById,
  getSalesByBranchId,
  markSaleAsPaid,
  
};

   

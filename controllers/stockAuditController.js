// controllers/stockAuditController.js
// ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö branchPriceController / salesReportController
// - ‡πÉ‡∏ä‡πâ async arrow functions
// - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ res.status(...).json(...) ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå `message` ‡πÄ‡∏°‡∏∑‡πà‡∏≠ error (‡πÑ‡∏°‡πà‡∏°‡∏µ `ok`)
// - ‡πÉ‡∏ä‡πâ Prisma singleton ‡∏à‡∏≤‡∏Å ../lib/prisma

const { prisma } = require('../lib/prisma')

// POST /api/stock-audit/ready/start
const startReadyAudit = async (req, res) => {
  try {
    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId)) {
      return res.status(401).json({ message: 'Unauthorized: missing user/branchId' })
    }

    console.log('üìå [startReadyAudit] branchId:', branchId)

    // map employeeId ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö FK (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á EmployeeProfile)
    const employeeId = req.user?.employeeId ?? req.user?.profileId ?? null

    // Guard: Prisma model ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Å‡∏±‡∏ô schema ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö)
    if (!prisma.stockAuditSession || typeof prisma.stockAuditSession.findFirst !== 'function') {
      const models = Object.keys(prisma).filter((k) => typeof prisma[k]?.findMany === 'function')
      console.error('‚ùå [startReadyAudit] Prisma model "stockAuditSession" not found. Available models:', models)
      return res.status(500).json({ message: 'Prisma model "StockAuditSession" ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Prisma Client. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à schema.prisma ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô `npx prisma generate`' })
    }

    const existing = await prisma.stockAuditSession.findFirst({
      where: { branchId, mode: 'READY_TO_SELL', status: 'DRAFT' },
      select: { id: true, expectedCount: true },
    })
    if (existing) {
      return res.status(409).json({ message: '‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö DRAFT ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', sessionId: existing.id, expectedCount: existing.expectedCount })
    }

    const expected = await prisma.stockItem.findMany({
      where: { branchId, status: 'IN_STOCK' },
      select: { id: true, productId: true, barcode: true },
    })
    const expectedCount = expected.length

    const created = await prisma.$transaction(async (tx) => {
      const session = await tx.stockAuditSession.create({
        data: {
          branchId,
          employeeId, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà map ‡∏à‡∏≤‡∏Å token
          mode: 'READY_TO_SELL',
          status: 'DRAFT',
          expectedCount,
          scannedCount: 0,
          startedAt: new Date(),
        },
      })

      if (expectedCount > 0) {
        await tx.stockAuditSnapshotItem.createMany({
          data: expected.map((e) => ({
            auditSessionId: session.id,
            stockItemId: e.id,
            productId: e.productId,
            barcode: e.barcode,
            expectedStatus: 'IN_STOCK',
          })),
          skipDuplicates: true,
        })
      }

      return session
    })

    return res.status(201).json({ sessionId: created.id, expectedCount })
  } catch (error) {
    console.error('‚ùå [startReadyAudit] error:', error)
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ' })
  }
}

// GET /api/stock-audit/:sessionId/overview
const getOverview = async (req, res) => {
  try {
    const sessionId = parseInt(req.params.sessionId, 10)
    if (!Number.isFinite(sessionId)) {
      return res.status(400).json({ message: 'sessionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const s = await prisma.stockAuditSession.findUnique({
      where: { id: sessionId },
      select: {
        id: true, branchId: true, employeeId: true, status: true, mode: true,
        expectedCount: true, scannedCount: true, startedAt: true, confirmedAt: true,
      },
    })
    if (!s) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å' })

    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId) || s.branchId !== branchId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ' })
    }
    if (s.mode !== 'READY_TO_SELL') {
      return res.status(400).json({ message: '‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const missingCount = Math.max(0, (s.expectedCount || 0) - (s.scannedCount || 0))
    return res.status(200).json({ session: s, missingCount })
  } catch (error) {
    console.error('‚ùå [getOverview] error:', error)
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ' })
  }
}

// POST /api/stock-audit/:sessionId/scan  { barcode }
const scanBarcode = async (req, res) => {
  try {
    const sessionId = parseInt(req.params.sessionId, 10)
    if (!Number.isFinite(sessionId)) {
      return res.status(400).json({ message: 'sessionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const session = await prisma.stockAuditSession.findUnique({
      where: { id: sessionId },
      select: { id: true, branchId: true, status: true, mode: true },
    })
    if (!session) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å' })

    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId) || session.branchId !== branchId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ' })
    }
    if (session.mode !== 'READY_TO_SELL') {
      return res.status(400).json({ message: '‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }
    if (session.status !== 'DRAFT') {
      return res.status(409).json({ message: '‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß' })
    }

    const barcodeRaw = req.body?.barcode ? String(req.body.barcode).trim() : ''
    if (!barcodeRaw) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î' })

    // ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ employeeId ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á employeeProfile ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FK byEmployeeId
    let employeeId = req.user?.employeeId ?? null
    if (!employeeId && req.user?.id) {
      const emp = await prisma.employeeProfile.findFirst({ where: { userId: req.user.id }, select: { id: true } })
      employeeId = emp?.id ?? null
    }
    if (!employeeId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (employeeProfile)'} )
    }

    const result = await prisma.$transaction(async (tx) => {
      const snap = await tx.stockAuditSnapshotItem.findFirst({
        where: { auditSessionId: sessionId, barcode: barcodeRaw },
        select: { id: true, isScanned: true, stockItemId: true },
      })

      if (!snap) return { status: 422, reason: 'NOT_IN_EXPECTED_SET' }
      if (snap.isScanned) return { status: 409, reason: 'DUPLICATE_SCAN' }

      const updated = await tx.stockAuditSnapshotItem.updateMany({
        where: { id: snap.id, isScanned: false },
        data: { isScanned: true, scannedAt: new Date() },
      })
      if (updated.count !== 1) return { status: 409, reason: 'DUPLICATE_SCAN' }

      const stockItem = await tx.stockItem.findUnique({
        where: { id: snap.stockItemId },
        select: { id: true, barcode: true },
      })
      if (!stockItem) return { status: 500, reason: 'STOCK_ITEM_NOT_FOUND' }

      await tx.stockAuditScanLog.create({
        data: {
          auditSessionId: sessionId,
          stockItemId: stockItem.id,
          barcode: stockItem.barcode,
          byEmployeeId: employeeId,
        },
      })

      await tx.stockAuditSession.update({
        where: { id: sessionId },
        data: { scannedCount: { increment: 1 } },
      })

      return { status: 200 }
    })

    if (result.status !== 200) {
      const map = {
        NOT_IN_EXPECTED_SET: '‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à',
        DUPLICATE_SCAN: '‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ',
        STOCK_ITEM_NOT_FOUND: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å',
      }
      return res.status(result.status).json({ message: map[result.reason] || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô' })
    }

    return res.status(200).json({ scanned: true })
  } catch (error) {
    console.error('‚ùå [scanBarcode] error:', error)
    return res.status(500).json({ message: '‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  }
}

// POST /api/stock-audit/:sessionId/scan-sn  { sn }
const scanSn = async (req, res) => {
  try {
    const sessionId = parseInt(req.params.sessionId, 10)
    if (!Number.isFinite(sessionId)) {
      return res.status(400).json({ message: 'sessionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const session = await prisma.stockAuditSession.findUnique({
      where: { id: sessionId },
      select: { id: true, branchId: true, status: true, mode: true },
    })
    if (!session) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å' })

    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId) || session.branchId !== branchId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ' })
    }
    if (session.mode !== 'READY_TO_SELL') {
      return res.status(400).json({ message: '‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }
    if (session.status !== 'DRAFT') {
      return res.status(409).json({ message: '‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß' })
    }

    // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ SN (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á sn ‡πÅ‡∏•‡∏∞ serialNumber ‡∏à‡∏≤‡∏Å body)
    const snRaw = req.body?.sn ? String(req.body.sn).trim() : (req.body?.serialNumber ? String(req.body.serialNumber).trim() : '')
    if (!snRaw) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Serial Number (SN)' })

    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ employeeId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πâ‡∏≤‡∏á FK
    let employeeId = req.user?.employeeId ?? null
    if (!employeeId && req.user?.id) {
      const emp = await prisma.employeeProfile.findFirst({ where: { userId: req.user.id }, select: { id: true } })
      employeeId = emp?.id ?? null
    }
    if (!employeeId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (employeeProfile)' })
    }

    const result = await prisma.$transaction(async (tx) => {
      // ‡∏´‡∏≤ stockItem ‡∏à‡∏≤‡∏Å SN ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (IN_STOCK)
      const stockItem = await tx.stockItem.findFirst({
        where: { branchId, status: 'IN_STOCK', serialNumber: snRaw },
        select: { id: true, barcode: true },
      })
      if (!stockItem) return { status: 422, reason: 'SN_NOT_FOUND' }

      // ‡∏´‡∏≤ snapshot ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ stockItemId
      const snap = await tx.stockAuditSnapshotItem.findFirst({
        where: { auditSessionId: sessionId, stockItemId: stockItem.id },
        select: { id: true, isScanned: true },
      })
      if (!snap) return { status: 422, reason: 'NOT_IN_EXPECTED_SET' }
      if (snap.isScanned) return { status: 409, reason: 'DUPLICATE_SCAN' }

      const updated = await tx.stockAuditSnapshotItem.updateMany({
        where: { id: snap.id, isScanned: false },
        data: { isScanned: true, scannedAt: new Date() },
      })
      if (updated.count !== 1) return { status: 409, reason: 'DUPLICATE_SCAN' }

      await tx.stockAuditScanLog.create({
        data: {
          auditSessionId: sessionId,
          stockItemId: stockItem.id,
          barcode: stockItem.barcode, // ‡πÄ‡∏Å‡πá‡∏ö barcode ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà (schema ‡πÄ‡∏î‡∏¥‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡πà)
          byEmployeeId: employeeId,
        },
      })

      await tx.stockAuditSession.update({
        where: { id: sessionId },
        data: { scannedCount: { increment: 1 } },
      })

      return { status: 200 }
    })

    if (result.status !== 200) {
      const map = {
        SN_NOT_FOUND: '‡πÑ‡∏°‡πà‡∏û‡∏ö Serial Number ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤',
        NOT_IN_EXPECTED_SET: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à',
        DUPLICATE_SCAN: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ',
      }
      return res.status(result.status).json({ message: map[result.reason] || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô SN' })
    }

    return res.status(200).json({ scanned: true })
  } catch (error) {
    console.error('‚ùå [scanSn] error:', error)
    return res.status(500).json({ message: '‡∏™‡πÅ‡∏Å‡∏ô SN ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  }
}

// POST /api/stock-audit/:sessionId/confirm  { strategy?: 'MARK_PENDING' | 'MARK_LOST' }
const confirmAudit = async (req, res) => {
  try {
    const sessionId = parseInt(req.params.sessionId, 10)
    if (!Number.isFinite(sessionId)) {
      return res.status(400).json({ message: 'sessionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const session = await prisma.stockAuditSession.findUnique({
      where: { id: sessionId },
      select: { id: true, branchId: true, status: true, mode: true },
    })
    if (!session) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å' })

    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId) || session.branchId !== branchId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ' })
    }
    if (session.mode !== 'READY_TO_SELL') {
      return res.status(400).json({ message: '‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }
    if (session.status !== 'DRAFT') {
      return res.status(409).json({ message: '‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' })
    }

    const strategy = req.body?.strategy || 'MARK_PENDING'
    const targetStatus = strategy === 'MARK_LOST' ? 'LOST' : 'MISSING_PENDING_REVIEW'

    await prisma.$transaction(async (tx) => {
      const missing = await tx.stockAuditSnapshotItem.findMany({
        where: { auditSessionId: sessionId, isScanned: false },
        select: { stockItemId: true },
      })

      if (missing.length > 0) {
        const ids = missing.map((m) => m.stockItemId)
        await tx.stockItem.updateMany({ where: { id: { in: ids } }, data: { status: targetStatus } })
      }

      await tx.stockAuditSession.update({
        where: { id: sessionId },
        data: { status: 'CONFIRMED', confirmedAt: new Date() },
      })
    })

    return res.status(200).json({ confirmed: true })
  } catch (error) {
    console.error('‚ùå [confirmAudit] error:', error)
    return res.status(500).json({ message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  }
}

// GET /api/stock-audit/:sessionId/items?scanned=0|1&q=&page=1&pageSize=50
const listAuditItems = async (req, res) => {
  try {
    const sessionId = parseInt(req.params.sessionId, 10)
    if (!Number.isFinite(sessionId)) {
      return res.status(400).json({ message: 'sessionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const session = await prisma.stockAuditSession.findUnique({
      where: { id: sessionId },
      select: { id: true, branchId: true, mode: true },
    })
    if (!session) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å' })

    const branchId = Number(req.user?.branchId)
    if (!Number.isFinite(branchId) || session.branchId !== branchId) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ' })
    }
    if (session.mode !== 'READY_TO_SELL') {
      return res.status(400).json({ message: '‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
    }

    const scanned = req.query.scanned
    const q = (req.query.q || '').toString().trim()
    const page = Math.max(1, parseInt((req.query.page || '1'), 10))
    const pageSizeRaw = Math.min(200, parseInt((req.query.pageSize || '50'), 10))
    const pageSize = Number.isFinite(pageSizeRaw) ? pageSizeRaw : 50
    const skip = (page - 1) * pageSize

    const where = {
      auditSessionId: sessionId,
      ...(scanned === '0' ? { isScanned: false } : {}),
      ...(scanned === '1' ? { isScanned: true } : {}),
      ...(q
        ? {
            OR: [
              { barcode: { contains: q, mode: 'insensitive' } },
              { stockItem: { serialNumber: { contains: q, mode: 'insensitive' } } },
              { product: { name: { contains: q, mode: 'insensitive' } } },
              { product: { model: { contains: q, mode: 'insensitive' } } },
            ],
          }
        : {}),
    }

    const [items, total] = await Promise.all([
      prisma.stockAuditSnapshotItem.findMany({
        where,
        select: {
          id: true,
          barcode: true,
          isScanned: true,
          scannedAt: true,
          product: { select: { id: true, name: true, model: true } },
          stockItem: { select: { serialNumber: true } },
        },
        orderBy: [{ isScanned: 'asc' }, { id: 'asc' }],
        skip,
        take: pageSize,
      }),
      prisma.stockAuditSnapshotItem.count({ where }),
    ])

    const itemsOut = items.map((it) => ({
      id: it.id,
      barcode: it.barcode,
      serialNumber: it.stockItem?.serialNumber || null,
      isScanned: it.isScanned,
      scannedAt: it.scannedAt,
      product: it.product,
    }))

    return res.status(200).json({ items: itemsOut, total, page, pageSize })
  } catch (error) {
    console.error('‚ùå [listAuditItems] error:', error)
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ' })
  }
}

module.exports = {
  startReadyAudit,
  getOverview,
  scanBarcode,
  scanSn,
  confirmAudit,
  listAuditItems,
}


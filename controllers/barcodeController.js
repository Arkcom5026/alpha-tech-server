
// üëâ Helper
const toInt = (v) => (v === undefined || v === null || v === '' ? undefined : Number(v));

// src/controllers/barcodeController.js

const { prisma, Prisma } = require('../lib/prisma');
const dayjs = require('dayjs');


// POST /api/barcodes/generate-missing/:receiptId
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏Ç‡∏ä‡∏ô (race-safe)
const generateMissingBarcodes = async (req, res) => {
  const receiptId = toInt(req.params?.receiptId);
  const userBranchId = toInt(req.user?.branchId);

  if (!Number.isInteger(receiptId) || !Number.isInteger(userBranchId)) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ receiptId ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≤‡∏Ç‡∏≤' });
  }

  try {
    // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dryRun + lotLabelPerLot
    const rawDry = (req.body?.dryRun ?? req.query?.dryRun ?? 'false');
    const dryRun = String(rawDry).toLowerCase() === '1' || String(rawDry).toLowerCase() === 'true';
    const lotLabelPerLot = Math.max(1, Number(req.body?.lotLabelPerLot ?? req.query?.lotLabelPerLot ?? 1));

    const result = await _generateMissingBarcodesForReceipt(receiptId, userBranchId, { dryRun, lotLabelPerLot });

    if (dryRun) {
      return res.status(200).json({ success: true, dryRun: true, plan: result.plan, totalToCreate: result.totalToCreate });
    }

    return res.status(200).json({ success: true, createdCount: result.createdCount, barcodes: result.barcodes });
  } catch (error) {
    console.error('[generateMissingBarcodes] ‚ùå', error);
    if (error?.status === 404 || error?.message === 'NOT_FOUND_RECEIPT') {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }
    if (error?.status === 400 || error?.message === 'COUNTER_OVERFLOW') {
      return res.status(400).json({ message: '‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ 9999 ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤' });
    }
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ' });
  }
};

// üîí Internal: ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å endpoint ‡πÅ‡∏•‡∏∞‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î auto-generate
async function _generateMissingBarcodesForReceipt(receiptId, userBranchId, opts = {}) {
  const { dryRun = false, lotLabelPerLot = 1 } = opts;
  return prisma.$transaction(async (tx) => {
    // 1) ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const receipt = await tx.purchaseOrderReceipt.findFirst({
      where: { id: receiptId, branchId: userBranchId },
      include: {
        items: {
          include: {
            purchaseOrderItem: {
              select: {
                id: true,
                productId: true,
                product: { select: { id: true, mode: true } },
              },
            },
            product: { select: { id: true, mode: true } }, // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QUICK/PO-less
            barcodeReceiptItem: { select: { id: true, kind: true, stockItemId: true, simpleLotId: true } },
          },
        },
        purchaseOrder: { select: { id: true, code: true } },
      },
    });

    if (!receipt) {
      const notFoundErr = new Error('NOT_FOUND_RECEIPT');
      notFoundErr.status = 404;
      throw notFoundErr;
    }

    const yearMonth = dayjs().format('YYMM');
    const branchId = receipt.branchId;

    // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡πÇ‡∏´‡∏°‡∏î
    const plansSN = []; // [{ receiptItemId, count }]
    const plansLOT = []; // [{ receiptItemId, count: 1, lotLabelPerLot }]

    for (const it of receipt.items) {
      const qty = Number(it.quantity || 0);
      const existing = Array.isArray(it.barcodeReceiptItem) ? it.barcodeReceiptItem.length : 0;
      const existingSN = (it.barcodeReceiptItem || []).filter((x) => x.kind === 'SN' || x.stockItemId).length;
      const existingLOT = (it.barcodeReceiptItem || []).filter((x) => x.kind === 'LOT' || x.simpleLotId).length;

      const mode = it.purchaseOrderItem?.product?.mode || it.product?.mode || null;

      if (mode === 'STRUCTURED') {
        const missing = Math.max(0, qty - existingSN);
        if (missing > 0) plansSN.push({ receiptItemId: it.id, count: missing });
      } else if (mode === 'SIMPLE') {
        const missing = existingLOT > 0 ? 0 : 1; // 1 lot = 1 barcode ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if (missing > 0) plansLOT.push({ receiptItemId: it.id, count: 1, lotLabelPerLot });
      } else {
        // ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÇ‡∏´‡∏°‡∏î ‚Üí ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏∞‡πÑ‡∏£ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏∏‡∏î
        // console.warn('[gen-missing] unknown mode for receiptItem', it.id);
      }
    }

    const totalToCreate = plansSN.reduce((s, p) => s + p.count, 0) + plansLOT.reduce((s, p) => s + p.count, 0);

    if (dryRun) {
      return { totalToCreate, plan: { SN: plansSN, LOT: plansLOT } };
    }

    if (totalToCreate === 0) {
      return { createdCount: 0, barcodes: [] };
    }

    // 3) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° counter ‡πÅ‡∏•‡∏∞‡∏à‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (race-safe)
    await tx.barcodeCounter.upsert({
      where: { branchId_yearMonth: { branchId, yearMonth } },
      update: {},
      create: { branchId, yearMonth, lastNumber: 0 },
    });

    const updatedCounter = await tx.barcodeCounter.update({
      where: { branchId_yearMonth: { branchId, yearMonth } },
      data: { lastNumber: { increment: totalToCreate } },
    });

    const endNumber = updatedCounter.lastNumber;
    const startNumber = endNumber - totalToCreate + 1;

    // Guard ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (0001‚Äì9999)
    if (endNumber > 9999) {
      await tx.barcodeCounter.update({
        where: { branchId_yearMonth: { branchId, yearMonth } },
        data: { lastNumber: { decrement: totalToCreate } },
      });
      const overflowErr = new Error('COUNTER_OVERFLOW');
      overflowErr.status = 400;
      throw overflowErr;
    }

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á SN/LOT)
    const newBarcodes = [];
    let running = startNumber;

    const pushNew = (receiptItemId, kind) => {
      const padded = String(running).padStart(4, '0');
      const code = `${String(branchId).padStart(3, '0')}${yearMonth}${padded}`;
      newBarcodes.push({
        barcode: code,
        branchId,
        yearMonth,
        runningNumber: running,
        status: 'READY',
        printed: false,
        kind, // 'SN' | 'LOT'
        purchaseOrderReceiptId: receipt.id,
        receiptItemId,
      });
      running += 1;
    };

    for (const plan of plansSN) {
      for (let i = 0; i < plan.count; i++) pushNew(plan.receiptItemId, 'SN');
    }
    for (const plan of plansLOT) {
      for (let i = 0; i < plan.count; i++) pushNew(plan.receiptItemId, 'LOT');
    }

    if (newBarcodes.length > 0) {
      await tx.barcodeReceiptItem.createMany({ data: newBarcodes, skipDuplicates: true });
    }

    return { createdCount: newBarcodes.length, barcodes: newBarcodes };
  }, { timeout: 30000 });
}

// GET /api/barcodes/by-receipt/:receiptId ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
const getBarcodesByReceiptId = async (req, res) => {
  const receiptId = toInt(req.params?.receiptId);
  const branchId = toInt(req.user?.branchId);

  if (!Number.isInteger(receiptId) || !Number.isInteger(branchId)) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ receiptId ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≤‡∏Ç‡∏≤' });
  }

  try {
    // üîé Optional filters for scan page
    const kindParam = String(req.query?.kind || '').toUpperCase();
    const kindFilter = kindParam === 'SN' || kindParam === 'LOT' ? kindParam : undefined;
    const onlyUnscanned = ['1', 'true', 'yes'].includes(String(req.query?.onlyUnscanned || '0').toLowerCase());
    const onlyUnactivated = ['1', 'true', 'yes'].includes(String(req.query?.onlyUnactivated || '0').toLowerCase());

    // Always ensure barcodes exist first (auto-generate only if the receipt has zero BRI at all)
    const totalExisting = await prisma.barcodeReceiptItem.count({
      where: { purchaseOrderReceiptId: receiptId, branchId },
    });
    if (totalExisting === 0) {
      await _generateMissingBarcodesForReceipt(receiptId, branchId, { dryRun: false, lotLabelPerLot: 1 });
    }

    const includeTree = {
      stockItem: {
        select: {
          id: true,
          serialNumber: true,
          productId: true,
          product: {
            select: { id: true, name: true, model: true, spec: true },
          },
        },
      },
      receiptItem: {
        select: {
          quantity: true,
          purchaseOrderItem: {
            select: {
              productId: true,
              product: {
                select: { id: true, name: true, model: true, spec: true },
              },
            },
          },
        },
      },
    };

    const whereClause = {
      purchaseOrderReceiptId: receiptId,
      branchId,
      ...(kindFilter ? { kind: kindFilter } : {}),
      ...(onlyUnscanned ? { stockItemId: null } : {}),
      ...(onlyUnactivated && kindFilter === 'LOT'
        ? { OR: [{ status: null }, { status: { not: 'SN_RECEIVED' } }] }
        : {}),
    };

    const rows = await prisma.barcodeReceiptItem.findMany({
      where: whereClause,
      include: includeTree,
      orderBy: { id: 'asc' },
    });

    const idSet = new Set();
    for (const b of rows) {
      const s = b.stockItem;
      const poi = b.receiptItem?.purchaseOrderItem;
      if (s?.product?.id) idSet.add(s.product.id);
      if (s?.productId) idSet.add(s.productId);
      if (poi?.product?.id) idSet.add(poi.product.id);
      if (poi?.productId) idSet.add(poi.productId);
    }
    let productMap = new Map();
    if (idSet.size > 0) {
      const products = await prisma.product.findMany({
        where: { id: { in: Array.from(idSet) } },
        select: { id: true, name: true, model: true, spec: true },
      });
      productMap = new Map(products.map((p) => [p.id, p]));
    }

    const receiptPO = await prisma.purchaseOrderReceipt.findFirst({
      where: { id: receiptId, branchId },
      select: { purchaseOrderId: true },
    });

    let poItemMap = new Map();
    let recToPoMap = new Map();

    if (receiptPO?.purchaseOrderId) {
      const poItems = await prisma.purchaseOrderItem.findMany({
        where: { purchaseOrderId: receiptPO.purchaseOrderId },
        select: {
          id: true,
          productId: true,
          product: { select: { id: true, name: true, model: true, spec: true } },
        },
      });
      poItemMap = new Map(poItems.map((it) => [it.id, it]));

      const recIds = Array.from(new Set(rows.map((r) => r.receiptItemId).filter(Boolean)));
      if (recIds.length) {
        const recItems = await prisma.purchaseOrderReceiptItem.findMany({
          where: { id: { in: recIds } },
          select: { id: true, purchaseOrderItemId: true },
        });
        recToPoMap = new Map(recItems.map((x) => [x.id, x.purchaseOrderItemId]));
      }
    }

    const briIds = Array.from(new Set(rows.map((r) => r.id).filter(Boolean)));
    const recItemIds = Array.from(new Set(rows.map((r) => r.receiptItemId).filter(Boolean)));
    let siByBRI = new Map();
    if (briIds.length || recItemIds.length) {
      const briLinks = await prisma.barcodeReceiptItem.findMany({
        where: { id: { in: briIds }, branchId, stockItemId: { not: null } },
        select: { id: true, stockItem: { select: { id: true, serialNumber: true } } },
      });
      siByBRI = new Map(
        briLinks
          .map((x) => [x.id, x.stockItem])
          .filter(([k, v]) => k != null && v != null)
      );
    }

    const barcodes = rows.map((b) => {
      const pStock = b.stockItem?.product ?? null;
      const pPO = b.receiptItem?.purchaseOrderItem?.product ?? null;

      const pFromId =
        (b.stockItem?.productId && productMap.get(b.stockItem.productId)) ||
        (b.receiptItem?.purchaseOrderItem?.productId && productMap.get(b.receiptItem.purchaseOrderItem.productId)) ||
        null;

      const poItemId = recToPoMap.get(b.receiptItemId);
      const poItem = poItemId ? poItemMap.get(poItemId) : null;
      const pFromPOChain = poItem?.product || (poItem?.productId ? productMap.get(poItem.productId) : null);
      const p = pStock ?? pPO ?? pFromId ?? pFromPOChain;

      const baseName = p?.name ?? null;
      const productName = baseName && p?.model ? `${baseName} (${p.model})` : baseName;
      const productSpec = p?.spec ?? null;

      const siFallback = b.stockItemId ? null : siByBRI.get(b.id) || null;
      const stockItemId = b.stockItemId ?? siFallback?.id ?? null;
      const serialNumber = b.stockItem?.serialNumber ?? siFallback?.serialNumber ?? null;

      const kind = b.kind ?? (b.stockItemId ? 'SN' : (b.simpleLotId ? 'LOT' : null));

      // üëâ Suggest number of duplicate labels for LOT (print convenience)
      const qtyLabelsSuggested = kind === 'LOT' ? Number(b.receiptItem?.quantity || 1) : 1;

      return {
        id: b.id,
        barcode: b.barcode,
        printed: !!b.printed,
        kind,
        status: b.status || null,
        stockItemId,
        simpleLotId: b.simpleLotId ?? null,
        receiptItemId: b.receiptItemId ?? null,
        serialNumber,
        productId: p?.id ?? b.stockItem?.productId ?? b.receiptItem?.purchaseOrderItem?.productId ?? null,
        productName,
        productSpec,
        qtyLabelsSuggested,
      };
    });

    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    return res.status(200).json({ success: true, count: barcodes.length, barcodes });
  } catch (error) {
    console.error('[getBarcodesByReceiptId] ‚ùå', error);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ' });
  }
};


// ---- Mark single receipt as completed ----
const markReceiptAsCompleted = async (req, res) => {
  try {
    const id = Number(req.params.id);
    const branchId = Number(req.user?.branchId);

    if (!id || !branchId) {
      return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ id ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≤‡∏Ç‡∏≤' });
    }

    const exists = await prisma.purchaseOrderReceipt.findFirst({
      where: { id, branchId },
      select: { id: true },
    });
    if (!exists) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ' });

    const result = await prisma.purchaseOrderReceipt.updateMany({
      where: { id, branchId },
      data: { statusReceipt: 'COMPLETED' },
    });

    if (result.count === 0) {
      return res.status(409).json({ error: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß)' });
    }

    const receipt = await prisma.purchaseOrderReceipt.findFirst({
      where: { id, branchId },
      select: { id: true, code: true, statusReceipt: true },
    });

    return res.json({ success: true, receipt });
  } catch (error) {
    console.error('‚ùå [markReceiptAsCompleted] error:', error);
    return res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
  }
};





// ---- Mark barcodes as printed (PATCH /api/barcodes/mark-printed) ----
// BRANCH_SCOPE_ENFORCED: ‡πÉ‡∏ä‡πâ branchId ‡∏à‡∏≤‡∏Å req.user ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö body ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: { purchaseOrderReceiptId } | { receiptId } | { id }
const markBarcodesAsPrinted = async (req, res) => {
  try {
    // ---- debug logs ----
    console.log('[markBarcodesAsPrinted] headers.ct', req.headers['content-type']);
    console.log('[markBarcodesAsPrinted] req.user:', req.user);
    console.log('[markBarcodesAsPrinted] typeof body =', typeof req.body, 'body =', req.body);
    console.log('[markBarcodesAsPrinted] req.query =', req.query);

    const branchId = Number(req.user?.branchId);
    if (!branchId) return res.status(401).json({ message: 'unauthorized: missing branchId' });

    // ---- robust id extractor ----
    const pickId = (src) => {
      if (src == null) return undefined;
      // primitive number or numeric string
      if (typeof src === 'number' || (typeof src === 'string' && src.trim() !== '')) {
        const n = Number(src);
        if (Number.isFinite(n) && n > 0) return n;
      }
      if (typeof src !== 'object') return undefined;
      const candidates = [
        src.purchaseOrderReceiptId,
        src.receiptId,
        src.id,
        src?.purchaseOrderReceipt?.id,
        src?.payload?.id,
        src?.data?.id,
        src?.purchaseOrderReceiptId?.id,
        src?.purchaseOrderReceiptId?.purchaseOrderReceiptId,
      ];
      for (const c of candidates) {
        const n = Number(c);
        if (Number.isFinite(n) && n > 0) return n;
      }
      return undefined;
    };

    let purchaseOrderReceiptId =
      pickId(req.body) ?? pickId(req.query) ?? Number(req.get('x-receipt-id'));

    if (!Number.isFinite(purchaseOrderReceiptId) || purchaseOrderReceiptId <= 0) {
      console.warn('[markBarcodesAsPrinted] missing receipt id. keys(body)=',
        typeof req.body === 'object' && req.body ? Object.keys(req.body) : '(primitive)',
        'query=', req.query
      );
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ purchaseOrderReceiptId (‡∏´‡∏£‡∏∑‡∏≠ receiptId/id)' });
    }

    // one-shot & idempotent
    const [itemsResult, receiptResult] = await prisma.$transaction([
      prisma.barcodeReceiptItem.updateMany({
        where: { branchId, purchaseOrderReceiptId, printed: false },
        data: { printed: true },
      }),
      prisma.purchaseOrderReceipt.updateMany({
        where: { id: purchaseOrderReceiptId, branchId },
        data: { printed: true },
      }),
    ]);

    console.log('[markBarcodesAsPrinted] updated items:', itemsResult.count, 'receipt updated:', receiptResult.count);

    return res.json({ success: true, updated: itemsResult.count, receiptUpdated: receiptResult.count });
  } catch (error) {
    console.error('‚ùå [markBarcodesAsPrinted] error:', error);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ printed ‡πÑ‡∏î‡πâ', error: error?.message });
  }
};






// GET /api/barcodes/receipts-with-barcodes
// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà "‡∏£‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î" ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô SIMPLE/STRUCTURED ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
// Criteria: ‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà printed ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
const getReceiptsWithBarcodes = async (req, res) => {
  const branchId = toInt(req.user?.branchId);

  if (!Number.isInteger(branchId)) {
    return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ branchId' });
  }

  try {
    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where: { branchId, barcodeReceiptItem: { some: { printed: false } } },
      include: {
        purchaseOrder: {
          select: {
            code: true,
            supplier: { select: { name: true, creditLimit: true, creditBalance: true } },
          },
        },
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏¥‡∏ß
        barcodeReceiptItem: { select: { id: true, printed: true, kind: true } },
      },
      orderBy: { createdAt: 'desc' },
      take: 200,
    });

    const rows = receipts
      .map((r) => {
        const supplier = r.purchaseOrder?.supplier;
        const creditLimit = Number(supplier?.creditLimit || 0);
        const creditBalance = Number(supplier?.creditBalance || 0);
        const creditRemaining = creditLimit - creditBalance;

        const total = r.barcodeReceiptItem.length; // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å kind
        const printed = r.barcodeReceiptItem.filter((i) => i.printed).length;
        const pending = total - printed;

        // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° kind ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ UI/Debug
        const totalSN = r.barcodeReceiptItem.filter((i) => i.kind === 'SN').length;
        const totalLOT = r.barcodeReceiptItem.filter((i) => i.kind === 'LOT').length;
        const printedSN = r.barcodeReceiptItem.filter((i) => i.printed && i.kind === 'SN').length;
        const printedLOT = r.barcodeReceiptItem.filter((i) => i.printed && i.kind === 'LOT').length;

        return {
          id: r.id,
          code: r.code,
          tax: r.supplierTaxInvoiceNumber,
          purchaseOrderCode: r.purchaseOrder?.code || '-',
          supplier: supplier?.name || '-',
          createdAt: r.createdAt,
          // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ UI ‡πÉ‡∏ä‡πâ
          total,
          printed,       // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å printed ‡∏à‡∏£‡∏¥‡∏á (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° SIMPLE/STRUCTURED)
          pending,       // ‚úÖ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå
          // ‡∏£‡∏±‡∏Å‡∏©‡∏≤ compatibility: ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ scanned ‚Üí ‡πÅ‡∏°‡πá‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà printed
          scanned: printed,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° (optional)
          totalSN,
          totalLOT,
          printedSN,
          printedLOT,
          creditRemaining,
          creditBalance,
        };
      })
      .filter((r) => r.pending > 0);

    return res.json(rows);
  } catch (err) {
    console.error('[getReceiptsWithBarcodes]', err);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ' });
  }
};

// GET /api/barcodes/reprint-search
const searchReprintReceipts = async (req, res) => {
  const branchId = toInt(req.user?.branchId);

  if (!Number.isInteger(branchId)) {
    return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ branchId' });
  }

  const mode = String(req.query?.mode || 'RC').toUpperCase();
  const q = String(req.query?.query || '').trim();
  const printedFlag = String(req.query?.printed ?? 'true').toLowerCase() === 'true';

  if (!q) {
    return res.json([]); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô ‚Üí ‡∏Ñ‡∏∑‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
  }

  try {
    const where = {
      branchId,
      barcodeReceiptItem: printedFlag ? { some: { printed: true } } : { some: {} },
    };

    if (mode === 'RC') {
      where.code = { contains: q, mode: 'insensitive' };
    } else if (mode === 'PO') {
      where.purchaseOrder = { is: { code: { contains: q, mode: 'insensitive' } } };
    }

    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where,
      include: {
        purchaseOrder: { select: { code: true, supplier: { select: { name: true } } } },
      },
      orderBy: { createdAt: 'desc' },
      take: 50,
    });

    const rows = receipts.map((r) => ({
      id: r.id,
      code: r.code,
      purchaseOrderCode: r.purchaseOrder?.code || '-',
      supplier: r.purchaseOrder?.supplier?.name || '-',
      createdAt: r.createdAt,
    }));

    return res.json(rows);
  } catch (err) {
    console.error('[searchReprintReceipts] ‚ùå', err);
    return res.status(500).json({ message: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' });
  }
};


// PATCH /api/barcodes/reprint/:receiptId
const reprintBarcodes = async (req, res) => {
  const receiptId = toInt(req.params?.receiptId);
  const branchId = toInt(req.user?.branchId);

  if (!Number.isInteger(receiptId) || !Number.isInteger(branchId)) {
    return res.status(400).json({ message: '‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  try {
    const receipt = await prisma.purchaseOrderReceipt.findFirst({
      where: { id: receiptId, branchId },
      select: { id: true },
    });
    if (!receipt) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }

    const includeTree = {
      stockItem: {
        select: {
          id: true,
          serialNumber: true,
          productId: true,
          product: {
            select: { id: true, name: true, model: true, spec: true },
          },
        },
      },
      receiptItem: {
        select: {
          purchaseOrderItem: {
            select: {
              productId: true,
              product: {
                select: { id: true, name: true, model: true, spec: true },
              },
            },
          },
        },
      },
    };

    const items = await prisma.barcodeReceiptItem.findMany({
      where: { purchaseOrderReceiptId: receiptId, branchId },
      include: includeTree,
      orderBy: { id: 'asc' },
    });

    // ‚úÖ ‡∏ó‡∏≥ product map ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    const idSet = new Set();
    for (const b of items) {
      const s = b.stockItem;
      const poi = b.receiptItem?.purchaseOrderItem;
      if (s?.product?.id) idSet.add(s.product.id);
      if (s?.productId) idSet.add(s.productId);
      if (poi?.product?.id) idSet.add(poi.product.id);
      if (poi?.productId) idSet.add(poi.productId);
    }
    let productMap = new Map();
    if (idSet.size > 0) {
      const products = await prisma.product.findMany({
        where: { id: { in: Array.from(idSet) } },
        select: { id: true, name: true, model: true, spec: true },
      });
      productMap = new Map(products.map((p) => [p.id, p]));
    }

    // üîÅ Fallback ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥:
    // BRI -> PurchaseOrderReceipt -> PurchaseOrder -> PurchaseOrderItem -> Product
    const receiptPO = await prisma.purchaseOrderReceipt.findFirst({
      where: { id: receiptId, branchId },
      select: { purchaseOrderId: true },
    });

    let poItemMap = new Map();
    let recToPoMap = new Map();

    if (receiptPO?.purchaseOrderId) {
      const poItems = await prisma.purchaseOrderItem.findMany({
        where: { purchaseOrderId: receiptPO.purchaseOrderId },
        select: {
          id: true,
          productId: true,
          product: { select: { id: true, name: true, model: true, spec: true } },
        },
      });
      poItemMap = new Map(poItems.map((it) => [it.id, it]));

      const recIds = Array.from(new Set(items.map((r) => r.receiptItemId).filter(Boolean)));
      if (recIds.length) {
        const recItems = await prisma.purchaseOrderReceiptItem.findMany({
          where: { id: { in: recIds } },
          select: { id: true, purchaseOrderItemId: true },
        });
        recToPoMap = new Map(recItems.map((x) => [x.id, x.purchaseOrderItemId]));
      }
    }

    // üîÅ Build fallback maps for StockItem for reprint
    const briIds2 = Array.from(new Set(items.map((r) => r.id).filter(Boolean)));
    const recItemIds2 = Array.from(new Set(items.map((r) => r.receiptItemId).filter(Boolean)));
    let siByBRI = new Map();
    let siByReceiptItem = new Map();
    if (briIds2.length || recItemIds2.length) {
      const stockItems2 = await prisma.stockItem.findMany({
        where: {
          branchId,
          OR: [
            briIds2.length ? { barcodeReceiptItemId: { in: briIds2 } } : undefined,
            recItemIds2.length ? { purchaseOrderReceiptItemId: { in: recItemIds2 } } : undefined,
          ].filter(Boolean),
        },
        select: { id: true, serialNumber: true, barcodeReceiptItemId: true, purchaseOrderReceiptItemId: true },
      });
      siByBRI = new Map(stockItems2.map((s) => [s.barcodeReceiptItemId, s]));
      siByReceiptItem = new Map(stockItems2.map((s) => [s.purchaseOrderReceiptItemId, s]));
    }

    const barcodes = items.map((b) => {
      const pStock = b.stockItem?.product ?? null;
      const pPO = b.receiptItem?.purchaseOrderItem?.product ?? null;
      const pFromId =
        (b.stockItem?.productId && productMap.get(b.stockItem.productId)) ||
        (b.receiptItem?.purchaseOrderItem?.productId && productMap.get(b.receiptItem.purchaseOrderItem.productId)) ||
        null;

      const poItemId = recToPoMap.get(b.receiptItemId);
      const poItem = poItemId ? poItemMap.get(poItemId) : null;
      const pFromPOChain = poItem?.product || (poItem?.productId ? productMap.get(poItem.productId) : null);
      const p = pStock ?? pPO ?? pFromId ?? pFromPOChain;

      const baseName = p?.name ?? null;
      const productName = baseName && p?.model ? `${baseName} (${p.model})` : baseName;
      const productSpec = p?.spec ?? null;

      // ‚úÖ Fallback ‡∏´‡∏≤ stockItem (id/SN) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥
      const siFallback = b.stockItemId
        ? null
        : siByBRI.get(b.id) || (b.receiptItemId ? siByReceiptItem.get(b.receiptItemId) : null);
      const stockItemId = b.stockItemId ?? siFallback?.id ?? null;
      const serialNumber = b.stockItem?.serialNumber ?? siFallback?.serialNumber ?? null;

      if (!productName) {
        console.warn('[reprint:noProductName]', {
          id: b.id,
          barcode: b.barcode,
          stockItemId: b.stockItemId,
          si_productId: b.stockItem?.productId || null,
          poi_productId: b.receiptItem?.purchaseOrderItem?.productId || null,
          hasStockProduct: !!b.stockItem?.product,
          hasPOProduct: !!b.receiptItem?.purchaseOrderItem?.product,
        });
      }

      return {
        id: b.id,
        barcode: b.barcode,
        printed: !!b.printed,
        stockItemId,
        serialNumber,
        productId: p?.id ?? b.stockItem?.productId ?? b.receiptItem?.purchaseOrderItem?.productId ?? null,
        productName,
        productSpec,
      };
    });

    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    return res.json({ success: true, count: barcodes.length, barcodes });
  } catch (err) {
    console.error('[reprintBarcodes] ‚ùå', err);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ' });
  }
};


// ---- Audit endpoint: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö (‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ----
// GET /api/barcodes/receipt/:receiptId/audit?includeDetails=1
const auditReceiptBarcodes = async (req, res) => {
  try {
    const receiptId = toInt(req.params?.receiptId);
    const branchId = toInt(req.user?.branchId);
    const includeDetails = String(req.query?.includeDetails || '0').toLowerCase() === '1' || String(req.query?.includeDetails || '').toLowerCase() === 'true';

    if (!Number.isInteger(receiptId) || !Number.isInteger(branchId)) {
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ receiptId ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≤‡∏Ç‡∏≤' });
    }

    const receipt = await prisma.purchaseOrderReceipt.findFirst({
      where: { id: receiptId, branchId },
      select: { id: true },
    });
    if (!receipt) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }

    // 1) ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ receipt items
    const recItems = await prisma.purchaseOrderReceiptItem.findMany({
      where: { purchaseOrderReceiptId: receiptId },
      select: { id: true, quantity: true },
    });
    const recItemIds = recItems.map((x) => x.id);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏•‡∏±‡∏ö summary ‡∏ß‡πà‡∏≤‡∏á
    if (recItemIds.length === 0) {
      return res.json({
        receiptId,
        summary: {
          structured: { items: 0, stockItems: 0, barcodes: 0 },
          simple: { items: 0, simpleLots: 0, barcodes: 0 },
          mixedItems: 0,
          unknownItems: 0,
        },
        anomalies: [],
        details: includeDetails ? [] : undefined,
      });
    }

    // 2) ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const bri = await prisma.barcodeReceiptItem.findMany({
      where: { purchaseOrderReceiptId: receiptId, branchId },
      select: { id: true, barcode: true, receiptItemId: true, stockItemId: true, simpleLotId: true },
    });

    // 3) ‡πÇ‡∏´‡∏•‡∏î StockItem/SimpleLot ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö receiptItems
    const stockItems = await prisma.stockItem.findMany({
      where: { branchId, purchaseOrderReceiptItemId: { in: recItemIds } },
      select: { id: true, purchaseOrderReceiptItemId: true },
    });
    const simpleLots = await prisma.simpleLot.findMany({
      where: { branchId, receiptItemId: { in: recItemIds } },
      select: { id: true, receiptItemId: true },
    });

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏ï‡πà‡∏≠ receiptItem
    const countMap = {
      briByItem: new Map(),           // ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πà‡∏≠ item
      briSNByItem: new Map(),         // ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å stockItemId
      briLOTByItem: new Map(),        // ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å simpleLotId
      siByItem: new Map(),            // stock items ‡∏ï‡πà‡∏≠ item
      slByItem: new Map(),            // simple lots ‡∏ï‡πà‡∏≠ item
      briSamplesByItem: new Map(),    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á barcode
    };

    const inc = (m, k, v = 1) => m.set(k, (m.get(k) || 0) + v);

    for (const b of bri) {
      const k = b.receiptItemId;
      inc(countMap.briByItem, k, 1);
      if (b.stockItemId) inc(countMap.briSNByItem, k, 1);
      if (b.simpleLotId) inc(countMap.briLOTByItem, k, 1);
      const arr = countMap.briSamplesByItem.get(k) || [];
      if (arr.length < 5) arr.push(b.barcode);
      countMap.briSamplesByItem.set(k, arr);
    }

    for (const s of stockItems) inc(countMap.siByItem, s.purchaseOrderReceiptItemId, 1);
    for (const l of simpleLots) inc(countMap.slByItem, l.receiptItemId, 1);

    // 5) ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÉ‡∏ö + ‡∏´‡∏≤ anomalies
    let structuredItems = 0, structuredStock = 0, structuredBarcodes = 0;
    let simpleItems = 0, simpleLotsCount = 0, simpleBarcodes = 0;
    let mixedItems = 0, unknownItems = 0;

    const anomalies = [];
    const addAnomaly = (type, itemId, info) => {
      let an = anomalies.find((a) => a.type === type);
      if (!an) { an = { type, count: 0, examples: [] }; anomalies.push(an); }
      an.count += 1;
      if (an.examples.length < 10) an.examples.push({ receiptItemId: itemId, ...info });
    };

    const details = [];

    for (const it of recItems) {
      const id = it.id;
      const si = countMap.siByItem.get(id) || 0;
      const sl = countMap.slByItem.get(id) || 0;
      const briTotal = countMap.briByItem.get(id) || 0;
      const briSN = countMap.briSNByItem.get(id) || 0;
      const briLOT = countMap.briLOTByItem.get(id) || 0;

      const isStructured = si > 0 || briSN > 0; // ‡∏°‡∏µ stockItem ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å stockItem
      const isSimple = sl > 0 || (briLOT > 0 && !isStructured); // ‡∏°‡∏µ lot ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å lot (‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà structured ‡πÅ‡∏•‡πâ‡∏ß)

      if (isStructured && isSimple) mixedItems += 1;
      if (!isStructured && !isSimple) unknownItems += 1;

      if (isStructured) {
        structuredItems += 1;
        structuredStock += si;
        structuredBarcodes += briTotal;
        // ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô
        if (si > briTotal) addAnomaly('STRUCTURED_MISSING_SN_BARCODES', id, { stockItems: si, barcodes: briTotal, samples: countMap.briSamplesByItem.get(id) || [] });
        if (briLOT > 0) addAnomaly('STRUCTURED_HAS_LOT_BARCODES', id, { lotBarcodes: briLOT });
      }

      if (isSimple) {
        simpleItems += 1;
        simpleLotsCount += sl;
        simpleBarcodes += briTotal;
        // ‡∏õ‡∏Å‡∏ï‡∏¥ 1 lot ‚Üí 1 barcode ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î qtyLabels)
        if (sl > 0 && briTotal === 0) addAnomaly('SIMPLE_MISSING_LOT_BARCODES', id, { simpleLots: sl });
        if (sl > 0 && briTotal > sl) addAnomaly('SIMPLE_HAS_MULTIPLE_BARCODES', id, { simpleLots: sl, barcodes: briTotal, samples: countMap.briSamplesByItem.get(id) || [] });
        if (briSN > 0) addAnomaly('SIMPLE_HAS_SN_BARCODES', id, { snBarcodes: briSN });
      }

      if (includeDetails) {
        details.push({
          receiptItemId: id,
          quantity: Number(it.quantity || 0),
          stockItems: si,
          simpleLots: sl,
          barcodesTotal: briTotal,
          barcodesSN: briSN,
          barcodesLOT: briLOT,
          samples: countMap.briSamplesByItem.get(id) || [],
          flags: {
            isStructured,
            isSimple,
            mixed: isStructured && isSimple,
            unknown: !isStructured && !isSimple,
          },
        });
      }
    }

    const payload = {
      receiptId,
      summary: {
        structured: { items: structuredItems, stockItems: structuredStock, barcodes: structuredBarcodes },
        simple: { items: simpleItems, simpleLots: simpleLotsCount, barcodes: simpleBarcodes },
        mixedItems,
        unknownItems,
      },
      anomalies,
      details: includeDetails ? details : undefined,
    };

    return res.json(payload);
  } catch (error) {
    console.error('[auditReceiptBarcodes] ‚ùå', error);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ' });
  }
};


// GET /api/barcodes/receipts-ready-to-scan-sn
// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ SN ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ SN ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å (stockItemId=null)
const getReceiptsReadyToScanSN = async (req, res) => {
  try {
    const branchId = toInt(req.user?.branchId);
    if (!Number.isInteger(branchId)) {
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ branchId' });
    }

    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where: {
        branchId,
        // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ SN ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà kind ‡∏≠‡∏≤‡∏à‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏î‡∏π stockItemId ‡∏î‡πâ‡∏ß‡∏¢)
        barcodeReceiptItem: { some: { OR: [{ kind: 'SN' }, { stockItemId: { not: null } }] } },
      },
      include: {
        purchaseOrder: { select: { code: true, supplier: { select: { name: true } } } },
        barcodeReceiptItem: { select: { kind: true, stockItemId: true, simpleLotId: true } },
      },
      orderBy: { createdAt: 'desc' },
      take: 200,
    });

    const rows = receipts
      .map((r) => {
        const isSN = (i) => (i.kind === 'SN') || (i.stockItemId != null && !i.simpleLotId);
        const totalSN = r.barcodeReceiptItem.filter(isSN).length;
        const scannedSN = r.barcodeReceiptItem.filter((i) => isSN(i) && i.stockItemId != null).length;
        const pendingSN = Math.max(0, totalSN - scannedSN);
        return {
          id: r.id,
          code: r.code,
          purchaseOrderCode: r.purchaseOrder?.code || '-',
          supplier: r.purchaseOrder?.supplier?.name || '-',
          createdAt: r.createdAt,
          totalSN,
          scannedSN,
          pendingSN,
        };
      })
      .filter((r) => r.pendingSN > 0);

    return res.json(rows);
  } catch (err) {
    console.error('[getReceiptsReadyToScanSN] ‚ùå', err);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏¥‡∏á SN ‡πÑ‡∏î‡πâ' });
  }
};

// GET /api/barcodes/receipts-ready-to-scan (‡∏£‡∏ß‡∏° SN/LOT)
// ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ SN ‡∏Ñ‡πâ‡∏≤‡∏á‡∏¢‡∏¥‡∏á ‡∏´‡∏£‡∏∑‡∏≠ LOT ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà ACTIVATE
const getReceiptsReadyToScan = async (req, res) => {
  try {
    const branchId = toInt(req.user?.branchId);
    if (!Number.isInteger(branchId)) {
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ branchId' });
    }

    const receipts = await prisma.purchaseOrderReceipt.findMany({
      where: { branchId, barcodeReceiptItem: { some: {} } },
      include: {
        purchaseOrder: { select: { code: true, supplier: { select: { name: true } } } },
        barcodeReceiptItem: { select: { kind: true, stockItemId: true, simpleLotId: true, status: true } },
      },
      orderBy: { createdAt: 'desc' },
      take: 200,
    });

    const rows = receipts
      .map((r) => {
        const items = r.barcodeReceiptItem || [];
        const isSN = (i) => (i.kind === 'SN') || (i.stockItemId != null && !i.simpleLotId);
        const isLOT = (i) => (i.kind === 'LOT') || (i.simpleLotId != null);

        const totalSN = items.filter(isSN).length;
        const scannedSN = items.filter((i) => isSN(i) && i.stockItemId != null).length;
        const pendingSN = Math.max(0, totalSN - scannedSN);

        const totalLOT = items.filter(isLOT).length;
        const activatedLOT = items.filter((i) => isLOT(i) && i.status === 'SN_RECEIVED').length;
        const pendingLOT = Math.max(0, totalLOT - activatedLOT);

        const pendingTotal = pendingSN + pendingLOT;

        return {
          id: r.id,
          code: r.code,
          purchaseOrderCode: r.purchaseOrder?.code || '-',
          supplier: r.purchaseOrder?.supplier?.name || '-',
          createdAt: r.createdAt,
          totalSN,
          scannedSN,
          pendingSN,
          totalLOT,
          activatedLOT,
          pendingLOT,
          pendingTotal,
        };
      })
      .filter((r) => r.pendingTotal > 0);

    return res.json(rows);
  } catch (err) {
    console.error('[getReceiptsReadyToScan] ‚ùå', err);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏¥‡∏á/‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏î‡πâ' });
  }
};

module.exports = {
  generateMissingBarcodes,
  getBarcodesByReceiptId,
  getReceiptsWithBarcodes,  
  reprintBarcodes,
  searchReprintReceipts,
  markReceiptAsCompleted,
  markBarcodesAsPrinted,
  auditReceiptBarcodes,
  getReceiptsReadyToScanSN,
  getReceiptsReadyToScan,
  };






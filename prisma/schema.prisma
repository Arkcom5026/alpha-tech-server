// ‚úÖ FINALIZED Prisma Schema ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö Online + POS + Purchasing + Services

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  customer
  employee
  admin
}

enum PurchaseOrderStatus {
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  PAID
  COMPLETED
  CANCELLED
}

enum PaymentStatusSupplier {
  UNPAID // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏•‡∏¢
  PARTIALLY_PAID // ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
  PAID // ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  CANCELLED
}

enum OrderStatus {
  NOT_PROCESS
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum StockStatus {
  IN_STOCK
  SOLD
  RETURNED
  DAMAGED
}

enum ServiceStatus {
  RECEIVED
  IN_PROGRESS
  WAITING_PARTS
  COMPLETED
  CANCELLED
}

enum ReceiptStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum LoginType {
  PHONE
  EMAIL
  SOCIAL
  ADMIN
}

enum PaymentMethod {
  CASH
  TRANSFER
  QR
  CREDIT
  OTHER
  DEPOSIT
}

enum SaleType {
  NORMAL
  GOVERNMENT
  WHOLESALE
}

enum SaleStatus {
  DRAFT // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á
  DELIVERED // ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏Å‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
  PENDING_PRICING // ‡∏£‡∏≠‡πÄ‡∏Ñ‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
  FINALIZED // ‡πÄ‡∏Ñ‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
  COMPLETED // ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
}

enum ReturnType {
  REFUND
  CLAIM
  EXCHANGE
  CREDIT_NOTE
  INTERNAL_USE
  STOCK_ERROR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  ADVANCE
  PO_BASED
  CREDIT_NOTE
}

enum OrderOnlineStatus {
  PENDING // ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  CONFIRMED // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á
  SHIPPED // ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  COMPLETED // ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  CANCELLED // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
}

enum OrderSource {
  POS
  ONLINE
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?   @unique // ‚úÖ Optional, but must be unique if provided
  loginId     String?   @unique // ‚úÖ For phone number login
  password    String
  role        Role
  enabled     Boolean   @default(true)
  lastLoginAt DateTime?
  loginType   LoginType @default(PHONE) // ‚úÖ Track source of registration

  customerProfile CustomerProfile?
  employeeProfile EmployeeProfile?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderOnline OrderOnline[]
  cart        Cart[]
}

model CustomerProfile {
  id         Int     @id @default(autoincrement())
  name       String?
  picture    String?
  address    String?
  district   String?
  province   String?
  postalCode String?
  phone      String?
  taxId      String?
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique

  orders   Order[]
  cart     Cart[]
  services ServiceOrder[]

  sale            Sale[]
  orderOnline     OrderOnline[]
  customerDeposit CustomerDeposit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerDeposit {
  id Int @id @default(autoincrement())

  cashAmount     Float   @default(0)
  transferAmount Float   @default(0)
  cardAmount     Float   @default(0)
  usedAmount     Float   @default(0)
  usedSaleId     Int?
  note           String? @db.Text

  totalAmount Float

  customer   CustomerProfile? @relation(fields: [customerId], references: [id])
  customerId Int?

  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId Int?

  status String @default("ACTIVE") // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö soft delete: ACTIVE ‡∏´‡∏£‡∏∑‡∏≠ CANCELLED

  createdAt    DateTime       @default(now())
  createdBy    String // employeeId ‡∏´‡∏£‡∏∑‡∏≠ userId
  updatedAt    DateTime       @updatedAt
  depositUsage DepositUsage[]

  @@index([customerId])
  @@index([branchId])
}

model DepositUsage {
  id                Int             @id @default(autoincrement())
  customerDeposit   CustomerDeposit @relation(fields: [customerDepositId], references: [id])
  customerDepositId Int

  sale   Sale @relation(fields: [saleId], references: [id])
  saleId Int

  amountUsed Float
  createdAt  DateTime @default(now())
}

model EmployeeProfile {
  id    Int     @id @default(autoincrement())
  name  String?
  phone String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId Int?

  position   Position? @relation(fields: [positionId], references: [id])
  positionId Int?

  confirmedOrders OrderOnline[] @relation("EmployeeConfirmedOrders")

  purchaseOrderCreated PurchaseOrder[]
  assignedServices     ServiceOrder[]
  approved             Boolean                @default(false)
  active               Boolean                @default(true)
  stockItem            StockItem[]
  sale                 Sale[]
  saleReturns          SaleReturn[] // ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  refundedReturns      SaleReturn[]           @relation("RefundedBy") // ‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
  payment              Payment[]
  combinedSaleDocument CombinedSaleDocument[]
  refundTransaction    RefundTransaction[]
  supplierPayment      SupplierPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id        Int     @id @default(autoincrement())
  name      String
  address   String
  phone     String?
  province  String?
  district  String?
  region    String? // ‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
  latitude  Float?
  longitude Float?

  branchPrices BranchPrice[]

  employees EmployeeProfile[]
  stock     StockItem[]
  suppliers Supplier[]
  pos       PurchaseOrder[]
  services  ServiceOrder[]

  RBACEnabled          Boolean                @default(true)
  purchaseOrderReceipt PurchaseOrderReceipt[]
  barcodeCounter       BarcodeCounter[]
  barcodeReceiptItem   BarcodeReceiptItem[]
  sale                 Sale[]
  saleReturn           SaleReturn[]
  payment              Payment[]
  combinedSaleDocument CombinedSaleDocument[]
  refundTransaction    RefundTransaction[]
  supplierPayment      SupplierPayment[]
  customerDeposit      CustomerDeposit[]
  orderOnline          OrderOnline[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id        Int               @id @default(autoincrement())
  name      String
  employees EmployeeProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  active Boolean @default(true)

  productTypes ProductType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductType {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  active Boolean @default(true)

  profiles ProductProfile[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductProfile {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  productType   ProductType @relation(fields: [productTypeId], references: [id])
  productTypeId Int

  templates ProductTemplate[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTemplate {
  id       Int     @id @default(autoincrement())
  name     String
  warranty Int?
  noSN     Boolean @default(false)
  codeType String  @default("D")
  active   Boolean @default(true)

  productProfile   ProductProfile @relation(fields: [productProfileId], references: [id])
  productProfileId Int

  products Product[]
  unit     Unit?     @relation(fields: [unitId], references: [id])
  unitId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String?
  model       String?
  description String?

  spec     String?
  sold     Int     @default(0)
  quantity Int?
  noSN     Boolean @default(false)
  active   Boolean @default(true)

  template   ProductTemplate @relation(fields: [templateId], references: [id])
  templateId Int

  productImages      ProductImage[]
  stockItems         StockItem[]
  purchaseOrderItems PurchaseOrderItem[]
  orderItems         ProductOnOrder[]
  cartItems          CartItem[]
  serviceItems       ServiceItem[]
  branchPrice        BranchPrice[]
  orderOnlineItem    OrderOnlineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BranchPrice {
  id Int @id @default(autoincrement())

  costPrice       Float // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
  priceRetail     Int? // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏õ‡∏•‡∏µ‡∏Å
  priceWholesale  Int? // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á
  priceTechnician Int? // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á
  priceOnline     Int? // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå

  // üÜï ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  effectiveDate DateTime?
  expiredDate   DateTime?
  note          String?
  updatedBy     Int?
  isActive      Boolean   @default(true)

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, branchId])
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  public_id  String  @unique
  url        String
  secure_url String
  active     Boolean @default(true)

  caption String?
  isCover Boolean?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  productTemplate ProductTemplate[]
}

model StockItem {
  id           Int     @id @default(autoincrement())
  barcode      String  @unique
  serialNumber String?

  qrCodeData   String?
  costPrice    Float? // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å  
  receivedAt   DateTime    @default(now())
  warrantyDays Int?
  expiredAt    DateTime?
  soldAt       DateTime?
  status       StockStatus @default(IN_STOCK)
  remark       String?
  locationCode String? // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á ‡πÄ‡∏ä‡πà‡∏ô A1, Shelf-3
  source       String? // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô PURCHASE_ORDER, CLAIM, GIFT
  tag          String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô PROMO2025
  batchNumber  String? // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  checkedBy    String? // ‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  color        String? // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏≥", "‡∏Ç‡∏≤‡∏ß"

  scannedBy           EmployeeProfile? @relation(fields: [scannedByEmployeeId], references: [id])
  scannedByEmployeeId Int?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  purchaseOrderReceiptItem   PurchaseOrderReceiptItem? @relation(fields: [purchaseOrderReceiptItemId], references: [id])
  purchaseOrderReceiptItemId Int?

  barcodeReceiptItem   BarcodeReceiptItem[]
  barcodeReceiptItemId String?
  saleItem             SaleItem?

  scannedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serialNumber, productId]) // ‚úÖ ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤ productId ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏°‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤
}

model Supplier {
  id            Int             @id @default(autoincrement())
  name          String
  contactPerson String?
  phone         String?
  email         String?
  taxId         String?
  address       String?
  province      String?
  postalCode    String?
  country       String?         @default("Thailand")
  paymentTerms  Int?            @default(30)
  creditLimit   Float?
  creditBalance Float?          @default(0)
  bankId        Int?
  accountNumber String?
  accountType   String?
  notes         String?
  branchId      Int?
  active        Boolean         @default(true)
  bank          Bank?           @relation(fields: [bankId], references: [id])
  branch        Branch?         @relation(fields: [branchId], references: [id])
  pos           PurchaseOrder[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  supplierPayment SupplierPayment[]
}

model Bank {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  supplier  Supplier[]
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PurchaseOrder {
  id            Int                   @id @default(autoincrement())
  code          String                @unique
  date          DateTime              @default(now())
  note          String?
  status        PurchaseOrderStatus   @default(PENDING)
  paymentStatus PaymentStatusSupplier @default(UNPAID)

  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId Int

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  employee   EmployeeProfile @relation(fields: [employeeId], references: [id])
  employeeId Int

  items    PurchaseOrderItem[]
  receipts PurchaseOrderReceipt[]
  payments PurchaseOrderPayment[]

  supplierPayment   SupplierPayment[]
  SupplierPaymentPO SupplierPaymentPO[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderItem {
  id Int @id @default(autoincrement())

  productId        Int
  quantity         Int
  receivedQuantity Int                        @default(0)
  costPrice        Float
  receipts         PurchaseOrderReceiptItem[]

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderReceipt {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  receivedAt DateTime @default(now())
  note       String?

  status       ReceiptStatus @default(PENDING)
  receivedById Int
  printed      Boolean       @default(false)
  branch       Branch        @relation(fields: [branchId], references: [id]) // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö Branch
  branchId     Int

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  items              PurchaseOrderReceiptItem[]
  barcodeReceiptItem BarcodeReceiptItem[]
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
}

model PurchaseOrderReceiptItem {
  id                  Int                  @id @default(autoincrement())
  receiptId           Int
  purchaseOrderItemId Int
  quantity            Int
  costPrice           Float
  receipt             PurchaseOrderReceipt @relation(fields: [receiptId], references: [id])
  purchaseOrderItem   PurchaseOrderItem    @relation(fields: [purchaseOrderItemId], references: [id])
  stockItems          StockItem[]
  barcodeReceiptItem  BarcodeReceiptItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model PurchaseOrderPayment {
  id Int @id @default(autoincrement())

  amount Float
  paidAt DateTime @default(now())
  method String
  note   String?

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              Int         @id @default(autoincrement())
  cartTotal       Float
  orderStatus     OrderStatus @default(NOT_PROCESS)
  stripePaymentId String
  status          String
  amount          Int
  currency        String

  customerId Int?
  customer   CustomerProfile? @relation(fields: [customerId], references: [id])
  products   ProductOnOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOnOrder {
  id        Int @id @default(autoincrement())
  productId Int
  orderId   Int
  count     Int

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int // FK ‡πÑ‡∏õ‡∏ó‡∏µ‡πà User (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
  user   User @relation(fields: [userId], references: [id])

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId Int?
}

model CartItem {
  id              Int     @id @default(autoincrement())
  cartId          Int
  cart            Cart    @relation(fields: [cartId], references: [id])
  productId       Int
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int     @default(1)
  priceAtThatTime Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model ServiceOrder {
  id         Int  @id @default(autoincrement())
  customerId Int?
  branchId   Int?
  employeeId Int?

  receiveDate DateTime      @default(now())
  status      ServiceStatus @default(RECEIVED)
  description String?
  note        String?

  customer CustomerProfile? @relation(fields: [customerId], references: [id])
  branch   Branch?          @relation(fields: [branchId], references: [id])
  employee EmployeeProfile? @relation(fields: [employeeId], references: [id])

  items ServiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceItem {
  id           Int     @id @default(autoincrement())
  serviceId    Int
  productId    Int?
  serialNumber String?
  problem      String?
  solution     String?
  cost         Float?

  service ServiceOrder @relation(fields: [serviceId], references: [id])
  product Product?     @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BarcodeCounter {
  id         Int      @id @default(autoincrement())
  branchId   Int
  yearMonth  String // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '2506' (‡∏õ‡∏µ 2025 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 06)
  lastNumber Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([branchId, yearMonth]) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô+‡∏™‡∏≤‡∏Ç‡∏≤
}

model BarcodeReceiptItem {
  id      Int    @id @default(autoincrement())
  barcode String @unique // ‡πÄ‡∏ä‡πà‡∏ô 0225060001

  yearMonth     String // ‡πÄ‡∏ä‡πà‡∏ô '2506'
  runningNumber Int // ‡πÄ‡∏ä‡πà‡∏ô 1 ‚Üí 0001
  status        String // READY | SN_RECEIVED | USED | VOID

  printed     Boolean    @default(false)
  stockItem   StockItem? @relation(fields: [stockItemId], references: [id])
  stockItemId Int?

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  purchaseOrderReceipt   PurchaseOrderReceipt @relation(fields: [purchaseOrderReceiptId], references: [id])
  purchaseOrderReceiptId Int

  receiptItem   PurchaseOrderReceiptItem @relation(fields: [receiptItemId], references: [id])
  receiptItemId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([branchId, yearMonth, runningNumber])
}

model Sale {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  soldAt     DateTime @default(now())
  customerId Int?
  employeeId Int
  branchId   Int

  totalBeforeDiscount Float
  totalDiscount       Float
  vat                 Float
  vatRate             Float      @default(7)
  totalAmount         Float
  note                String?
  status              SaleStatus @default(DRAFT)
  refCode             String?
  isTaxInvoice        Boolean    @default(false)
  paid                Boolean    @default(false)
  paidAt              DateTime?

  isCredit               Boolean               @default(false) // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  dueDate                DateTime? // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (30/45/60/90 ‡∏ß‡∏±‡∏ô)
  officialDocumentNumber String? // ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠/‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
  saleType               SaleType              @default(NORMAL)
  finalizedAt            DateTime? // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ñ‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£
  combinedDocumentId     Int?
  combinedDocument       CombinedSaleDocument? @relation("SalesCombined", fields: [combinedDocumentId], references: [id])

  customer CustomerProfile? @relation(fields: [customerId], references: [id])
  employee EmployeeProfile  @relation(fields: [employeeId], references: [id])
  branch   Branch           @relation(fields: [branchId], references: [id])
  items    SaleItem[]
  returns  SaleReturn[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Payment      Payment[]
  DepositUsage DepositUsage[]

  @@index([branchId, soldAt])
  @@index([isCredit, dueDate])
  @@index([combinedDocumentId])
}

model SaleItem {
  id          Int @id @default(autoincrement())
  saleId      Int
  stockItemId Int @unique

  basePrice      Float // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡πà‡∏≠‡∏ô VAT
  vatAmount      Float // VAT 7% ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  price          Float // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô (‡∏£‡∏ß‡∏° VAT ‡πÅ‡∏•‡πâ‡∏ß)
  discount       Float // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ
  refundedAmount Float   @default(0) // ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ
  remark         String?

  sale        Sale             @relation(fields: [saleId], references: [id])
  stockItem   StockItem        @relation(fields: [stockItemId], references: [id])
  returnItems SaleReturnItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id     Int    @id @default(autoincrement())
  code   String @unique
  sale   Sale   @relation(fields: [saleId], references: [id])
  saleId Int

  receivedAt           DateTime @default(now())
  note                 String?
  combinedDocumentCode String?

  isCancelled Boolean   @default(false)
  cancelNote  String?
  cancelledAt DateTime?

  employeeProfile   EmployeeProfile? @relation(fields: [employeeProfileId], references: [id])
  employeeProfileId Int?

  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId Int?

  items PaymentItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentItem {
  id        Int     @id @default(autoincrement())
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int

  paymentMethod PaymentMethod
  amount        Decimal       @db.Decimal(10, 2)
  note          String?

  slipImage String?
  cardRef   String?
  govImage  String?

  createdAt DateTime @default(now())
}

model CombinedSaleDocument {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  issueDate      DateTime @default(now())
  note           String?
  createdBy      Int
  branchId       Int
  totalAmount    Float
  finalAmount    Float
  adjustmentNote String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser EmployeeProfile @relation(fields: [createdBy], references: [id])
  branch        Branch          @relation(fields: [branchId], references: [id])
  sales         Sale[]          @relation("SalesCombined")
}

model SaleReturn {
  id                   Int        @id @default(autoincrement())
  code                 String     @unique
  saleId               Int
  returnedAt           DateTime   @default(now())
  employeeId           Int
  refundedByEmployeeId Int?
  branchId             Int
  reason               String?
  totalRefund          Float
  refundedAmount       Float      @default(0) // ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏£‡∏¥‡∏á
  deductedAmount       Float      @default(0) // ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  isFullyRefunded      Boolean    @default(false) // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  refundMethod         String // ‡πÄ‡∏ä‡πà‡∏ô CASH, QR, CREDIT
  returnType           ReturnType @default(REFUND) // ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  note                 String?
  status               String     @default("PENDING") // PENDING, REFUNDED, REJECTED

  sale       Sale             @relation(fields: [saleId], references: [id])
  employee   EmployeeProfile  @relation(fields: [employeeId], references: [id])
  refundedBy EmployeeProfile? @relation("RefundedBy", fields: [refundedByEmployeeId], references: [id])
  branch     Branch           @relation(fields: [branchId], references: [id])
  items      SaleReturnItem[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  refundTransaction RefundTransaction[]
}

model SaleReturnItem {
  id           Int @id @default(autoincrement())
  saleReturnId Int
  saleItemId   Int

  refundAmount Float // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  reason       String? // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  reasonCode   String? // ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡πÄ‡∏ä‡πà‡∏ô DEFECT, CHANGE_MIND

  saleReturn SaleReturn @relation(fields: [saleReturnId], references: [id])
  saleItem   SaleItem   @relation(fields: [saleItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefundTransaction {
  id                   Int      @id @default(autoincrement())
  saleReturnId         Int
  amount               Float
  deducted             Float    @default(0)
  method               String
  note                 String?
  refundedAt           DateTime @default(now())
  refundedByEmployeeId Int
  branchId             Int

  saleReturn SaleReturn      @relation(fields: [saleReturnId], references: [id])
  refundedBy EmployeeProfile @relation(fields: [refundedByEmployeeId], references: [id])
  branch     Branch          @relation(fields: [branchId], references: [id])
}

model SupplierPayment {
  id         Int      @id @default(autoincrement())
  code       String?  @unique
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId Int

  debitAmount  Float? // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
  creditAmount Float? // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏ô‡πâ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏Å‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

  method String // ‡πÄ‡∏ä‡πà‡∏ô CASH, TRANSFER, CHEQUE
  note   String?

  paymentRef      String? // ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (PM-xxx)
  paymentProofUrl String? // ‚úÖ ‡πÅ‡∏ô‡∏ö URL ‡∏™‡∏•‡∏¥‡∏õ
  paymentStatus   String  @default("CONFIRMED") // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  sourceType      String? // ‡πÄ‡∏ä‡πà‡∏ô Manual, FromPO
  sourcePOId      Int? // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ PO ‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ

  paymentType PaymentType @default(PO_BASED) // ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô: ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤, ‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠, ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏ô‡πâ‡∏ï

  sourcePO PurchaseOrder? @relation(fields: [sourcePOId], references: [id])

  paidAt     DateTime        @default(now())
  employee   EmployeeProfile @relation(fields: [employeeId], references: [id])
  employeeId Int

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  supplierPaymentPO SupplierPaymentPO[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplierPaymentPO {
  id        Int             @id @default(autoincrement())
  payment   SupplierPayment @relation(fields: [paymentId], references: [id])
  paymentId Int

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int
  amountPaid      Float //‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (amountPaid) ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ PO

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([paymentId, purchaseOrderId])
}

model OrderOnline {
  id         Int              @id @default(autoincrement())
  customerId Int?
  customer   CustomerProfile? @relation(fields: [customerId], references: [id])

  branchId Int
  branch   Branch @relation(fields: [branchId], references: [id])

  fullName   String
  phone      String
  email      String?
  address    String
  district   String
  province   String
  postalCode String

  note          String?
  status        OrderOnlineStatus @default(PENDING)
  paymentStatus PaymentStatus?
  paymentMethod String?
  trackingCode  String?
  source        OrderSource?
  deliveryDate  DateTime?

  confirmedByEmployeeId Int?
  confirmedByEmployee   EmployeeProfile? @relation("EmployeeConfirmedOrders", fields: [confirmedByEmployeeId], references: [id])

  shippedAt    DateTime?
  cancelReason String?

  items     OrderOnlineItem[]
  createdAt DateTime          @default(now())
  User      User?             @relation(fields: [userId], references: [id])
  userId    Int?
}

model OrderOnlineItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Float?
  note            String?

  order   OrderOnline @relation(fields: [orderId], references: [id])
  product Product     @relation(fields: [productId], references: [id])
}
